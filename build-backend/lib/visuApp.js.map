{"version":3,"file":"visuApp.js","sourceRoot":"","sources":["../../src/lib/visuApp.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IotAdapter } from '../main';\n/**\n * Handles `sendToAdapter` command\n *\n * @param visuData the data sent by the app\n * @param adapter the adapter instance\n */\nexport async function handleSendToAdapter(\n    visuData: { command: 'sendToAdapter'; instance: string; message: string; data: any },\n    adapter: IotAdapter,\n): Promise<{ error?: string; result?: string }> {\n    const { instance, message, data } = visuData;\n\n    const resp = await adapter.sendToAsync(instance, message, data, { timeout: 2_000 });\n    return { ...resp } as { error?: string; result?: string };\n}\n\n/**\n * Handles `sendToAdapter` command\n *\n * @param visuData the data sent by the app\n * @param adapter the adapter instance\n */\nexport async function handleGetInstances(\n    visuData: { command: 'getInstances'; adapterName: string },\n    adapter: IotAdapter,\n): Promise<{ instances: string[] }> {\n    const { adapterName } = visuData;\n\n    const res = await adapter.getObjectViewAsync('system', 'instance', {\n        startkey: `system.adapter.${adapterName}.`,\n        endkey: `system.adapter.${adapterName}.\\u9999`,\n    });\n\n    const instances = res.rows.map(item => item.id.substring('system.adapter.'.length));\n    return { instances };\n}\n\n/**\n *  Handle Geofence data update from app\n *\n * @param visuData the data sent by app\n * @param adapter the adapter instance\n */\nexport async function handleGeofenceData(\n    visuData: { presence: Record<string, boolean>; devices?: Record<string, any> },\n    adapter: IotAdapter,\n): Promise<void> {\n    await adapter.setObjectNotExistsAsync('app.geofence', {\n        type: 'folder',\n        common: {\n            name: 'Geofence',\n            desc: 'Collection of all the Geofence-locations managed by ioBroker Visu App',\n        },\n        native: {},\n    });\n\n    for (const [locationName, presenceStatus] of Object.entries(visuData.presence)) {\n        const id = `app.geofence.${locationName.replace(adapter.FORBIDDEN_CHARS, '_').replace(/\\s|ä|ü|ö/g, '_')}`;\n\n        await adapter.setObjectNotExistsAsync(id, {\n            type: 'state',\n            common: {\n                name: locationName,\n                desc: `Geofence Status of ${locationName}`,\n                type: 'boolean',\n                read: true,\n                write: false,\n                role: 'indicator',\n            },\n            native: {},\n        });\n\n        await adapter.setState(id, presenceStatus, true);\n    }\n}\n\n/** Map data name to state common */\nconst commonMapping: Record<string, ioBroker.StateCommon> = {\n    actionResponse: {\n        name: 'Action response for a notification',\n        desc: 'User clicked on a notification and this is the response from the app',\n        type: 'string',\n        read: true,\n        write: false,\n        role: 'text',\n    },\n    ssid: {\n        name: 'Current connected WiFi',\n        desc: 'Current connected WiFi network',\n        type: 'string',\n        read: true,\n        write: false,\n        role: 'text',\n    },\n    connectionType: {\n        name: 'Current connection type',\n        desc: 'Current connection type',\n        type: 'string',\n        read: true,\n        write: false,\n        role: 'text',\n    },\n    batteryLevel: {\n        name: 'Current battery level',\n        desc: 'Current battery level',\n        type: 'number',\n        read: true,\n        write: false,\n        role: 'level.battery',\n        unit: '%',\n    },\n    batteryState: {\n        name: 'Current battery state',\n        desc: 'Current battery state',\n        type: 'number',\n        read: true,\n        write: false,\n        role: 'value',\n        states: {\n            0: 'unknown',\n            1: 'unplugged',\n            2: 'charging',\n            3: 'full',\n        },\n    },\n};\n\n/**\n *  Handle device's data update from app\n *\n * @param visuData the data sent by app\n * @param adapter the adapter instance\n */\nexport async function handleDevicesData(\n    visuData: {\n        presence?: Record<string, boolean>;\n        devices: { [deviceId: string]: { [dataName: string]: ioBroker.StateValue } };\n    },\n    adapter: IotAdapter,\n): Promise<void> {\n    // e.g. {\"devices\":{\"iPhone\":{\"batteryLevel\":95,\"batteryState\":2,\"ssid\":\"FRITZ!Box Fon WLAN\",\"connectionType\":\"wifi\"}}}\n    for (const [deviceName, deviceData] of Object.entries(visuData.devices)) {\n        const deviceId = `app.devices.${deviceName.replace(adapter.FORBIDDEN_CHARS, '_').replace(/\\s|ä|ü|ö/g, '_')}`;\n        await adapter.setObjectNotExistsAsync(deviceId, {\n            type: 'folder',\n            common: {\n                name: deviceName,\n                desc: 'All states related to this device',\n            },\n            native: {},\n        });\n\n        for (const [dataName, dataVal] of Object.entries(deviceData)) {\n            const id = `${deviceId}.${dataName}`;\n\n            if (!commonMapping[dataName]) {\n                adapter.log.warn(`Unknown device data \"${dataName}\" with value \"${dataVal}\"`);\n            }\n\n            await adapter.setObjectNotExistsAsync(id, {\n                type: 'state',\n                common: commonMapping[dataName],\n                native: {},\n            });\n\n            await adapter.setState(id, dataVal, true);\n        }\n    }\n}\n"]}