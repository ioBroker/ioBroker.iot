{"version":3,"file":"alexaSmartHomeV3.js","sourceRoot":"","sources":["../../src/lib/alexaSmartHomeV3.ts"],"names":[],"mappings":"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","sourcesContent":["import DeviceManager from './AlexaSmartHomeV3/DeviceManager';\nimport AdapterProvider from './AlexaSmartHomeV3/Helpers/AdapterProvider';\nimport IotProxy from './AlexaSmartHomeV3/Helpers/IotProxy';\nimport RateLimiter from './AlexaSmartHomeV3/Helpers/RateLimiter';\nimport type { device as DeviceModule } from 'aws-iot-device-sdk';\nimport type { AlexaSH3ControlDescription, AlexaSH3DeviceDescription, AlexaV3Request } from './AlexaSmartHomeV3/types';\nimport type AlexaResponse from './AlexaSmartHomeV3/Alexa/AlexaResponse';\nimport type { IotAdapter } from '../main';\n\nexport default class AlexaSH3 {\n    private readonly deviceManager: DeviceManager;\n\n    constructor(options: { adapter: IotAdapter; iotDevice: DeviceModule; iotClientId: string }) {\n        this.deviceManager = new DeviceManager();\n        AdapterProvider.init(options.adapter);\n        IotProxy.init(options.iotDevice, options.iotClientId, options.adapter.config.login);\n        RateLimiter.init().catch((err: Error) => options.adapter.log.error(err.message));\n        // Subscribe on enum changes\n        options.adapter.subscribeForeignObjects('enum.functions.*');\n        options.adapter.subscribeForeignObjects('enum.rooms.*');\n    }\n\n    setLanguage(lang: ioBroker.Languages): void {\n        this.deviceManager.language = lang;\n    }\n\n    async process(event: AlexaV3Request): Promise<AlexaResponse> {\n        return await this.deviceManager.handleAlexaEvent(event);\n    }\n\n    async updateDevices(): Promise<void> {\n        await this.deviceManager.collectEndpoints();\n    }\n\n    async getDevices(): Promise<AlexaSH3DeviceDescription[]> {\n        const endpoints = this.deviceManager ? this.deviceManager.endpoints : [];\n\n        const result: AlexaSH3DeviceDescription[] = [];\n\n        for (let p = 0; p < endpoints.length; p++) {\n            const endpoint = endpoints[p];\n            const controls: AlexaSH3ControlDescription[] = [];\n\n            for (let c = 0; c < endpoint.controls.length; c++) {\n                const control = endpoint.controls[c];\n                let supported: string[] = [];\n                let enforced: string[] = [];\n                control._supported.forEach(item =>\n                    item._properties.forEach(\n                        prop => !supported.includes(prop.constructor.name) && supported.push(prop.constructor.name),\n                    ),\n                );\n                control._enforced.forEach(item =>\n                    item._properties.forEach(\n                        prop => !enforced.includes(prop.constructor.name) && enforced.push(prop.constructor.name),\n                    ),\n                );\n\n                supported = supported.map(prop => prop.replace(/^[A-Z]/, c => c.toLowerCase())).sort();\n\n                enforced = enforced.map(prop => prop.replace(/^[A-Z]/, c => c.toLowerCase())).sort();\n\n                controls.push({\n                    type: control.log._component,\n                    states: control._states,\n                    // always sort by id, so the GUI can address the group by the first control\n                    supported,\n                    // always sort by id, so the GUI can address the group by the first control\n                    enforced,\n                    state: await control.reportState(),\n                });\n            }\n            // always sort by id, so the GUI can address the group by the first control\n            controls.sort((c1, c2) => (c1.type > c2.type ? -1 : c1.type < c2.type ? 1 : 0));\n\n            const device: AlexaSH3DeviceDescription = {\n                controls,\n                friendlyName: endpoint.friendlyName,\n                autoDetected: endpoint.autoDetected,\n                funcName: endpoint.funcName,\n                roomName: endpoint.roomName,\n                id: endpoint.id,\n                type: endpoint.log._component,\n                state: await endpoint.reportState(),\n            };\n            result.push(device);\n        }\n\n        return result;\n    }\n\n    async handleStateUpdate(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n        await this.deviceManager.handleStateUpdate(id, state);\n    }\n\n    async handleObjectChange(id: string, obj: ioBroker.Object | null | undefined): Promise<void> {\n        // Handle enum changes\n        if (obj) {\n            // An object was changed\n            // console.log(`object ${id} changed: ${JSON.stringify(obj)}`);\n        } else {\n            // An object was deleted\n            // console.log(`object ${id} deleted`);\n        }\n\n        // either an enum was deleted or changed => re-collect devices\n\n        // intentionally not waiting for the promise to resolve\n        await this.deviceManager.collectEndpoints();\n    }\n\n    pauseEvents(): void {\n        this.deviceManager.pauseEvents();\n    }\n\n    async destroy(): Promise<void> {\n        await this.deviceManager.destroy();\n        await AdapterProvider.get().unsubscribeForeignObjectsAsync('enum.functions.*');\n        await AdapterProvider.get().unsubscribeForeignObjectsAsync('enum.rooms.*');\n    }\n}\n"]}