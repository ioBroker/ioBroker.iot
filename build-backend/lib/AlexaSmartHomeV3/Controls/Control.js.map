{"version":3,"file":"Control.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Controls/Control.ts"],"names":[],"mappings":"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","sourcesContent":["import AlexaResponse from '../Alexa/AlexaResponse';\nimport { firstLower, className, ensureValueInRange_0_100, denormalize_0_100, normalize_0_100 } from '../Helpers/Utils';\nimport Logger from '../Helpers/Logger';\nimport AdapterProvider from '../Helpers/AdapterProvider';\nimport type { ControlStateInitObject, Base as PropertiesBase } from '../Alexa/Properties/Base';\nimport PowerState from '../Alexa/Properties/PowerState';\nimport DetectionState from '../Alexa/Properties/DetectionState';\nimport type {\n    AlexaV3Category,\n    AlexaV3DirectiveValue,\n    AlexaV3ReportedState,\n    AlexaV3Request,\n    IotExternalDetectorState,\n    IotExternalPatternControl,\n} from '../types';\nimport type { Base as CapabilitiesBase } from '../Alexa/Capabilities/Base';\n\n/**\n * Represents the base functionality for a control in a smart device. A smart device has at least one control.\n * The specific functionality, natively supported capabilities, etc. are defined in derived classes.\n */\nexport default class Control {\n    static stateKeys = [\n        'SET',\n        'ACTUAL',\n        'ON_SET',\n        'ON_ACTUAL',\n        'POWER',\n        'MODE',\n        'HUE',\n        'DIMMER',\n        'BRIGHTNESS',\n        'SATURATION',\n        'TEMPERATURE',\n        'ON',\n        'MUTE',\n    ];\n    public readonly log: Logger;\n    public readonly _supported: CapabilitiesBase[];\n    public readonly _enforced: CapabilitiesBase[];\n    public readonly _states: Record<string, IotExternalDetectorState | undefined> = {};\n\n    /**\n     * @param detectedControl - The detected control in terms of iobroker type detector.\n     */\n    constructor(detectedControl: IotExternalPatternControl) {\n        this.initStates(detectedControl);\n        this._supported = this.initCapabilities();\n        this._enforced = this.initEnforcedCapabilities();\n        this.log = new Logger(this);\n        this.log.silly(`created instance`);\n    }\n    /**\n     * This function maps a passed on control to an array of objects. Each object contains an Alexa capability the control natively supports\n     * and at least one property. Every property is initialized with corresponding iobroker state ids and value converters from Alexa to iobroker types\n     * and vice versa.\n     *\n     * @returns Array of objects with natively supported Alexa capabilities and correspondingly configured instances of StateProxies\n     */\n    initCapabilities(): CapabilitiesBase[] {\n        return [];\n    }\n    /**\n     * This function maps a passed on control to an array of objects. Each object contains an Alexa capability the control can handle even\n     * though not natively supported (e.g., the light control can handle the Alexa BrightnessController directive by switching\n     * itself `ON` on brightness > 0 and `OFF` on brightness == 0)\n     * Every capability has at least one property with set up iobroker state ids and value converters from Alexa to iobroker types\n     * and vice versa.\n     *\n     * @returns Array of objects with natively supported Alexa capabilities and correspondingly configured instances of StateProxies\n     */\n    initEnforcedCapabilities(): CapabilitiesBase[] {\n        return [];\n    }\n\n    get allCapabilities(): CapabilitiesBase[] {\n        return this.supported.concat(this.enforced);\n    }\n\n    static get type(): string {\n        return firstLower(className(this.toString()));\n    }\n    /**\n     * Getter for Alexa categories\n     */\n    get categories(): AlexaV3Category[] {\n        return ['OTHER'];\n    }\n\n    get name(): string {\n        return `${this.constructor.name}`;\n    }\n    /**\n     * Getter for _supported\n     */\n    get supported(): CapabilitiesBase[] {\n        return this._supported;\n    }\n    /**\n     * Getter for _enforced\n     */\n    get enforced(): CapabilitiesBase[] {\n        return this._enforced;\n    }\n    /**\n     * This function returns whether the control natively supports the passed on Alexa directive.\n     *\n     * @param event The event containing the Alexa directive as it comes from AWS Alexa Service\n     * @returns True if the control natively supports the directive, false - otherwise\n     */\n    supports(event: AlexaV3Request): boolean {\n        return this.supported.find(capability => capability.matches(event)) !== undefined;\n    }\n    /**\n     * This function returns whether the control though doesn't natively support the passed on Alexa directive, but able to handle it.\n     *\n     * @param event The event containing the Alexa directive as it comes from AWS Alexa Service\n     * @returns True if the control can handle the directive, false - otherwise\n     */\n    canHandle(event: AlexaV3Request): boolean {\n        return this.enforced.find(capability => capability.matches(event)) !== undefined;\n    }\n    /**\n     * This function processes an Alexa directive. Usually the result of the processing is setting an iobroker state to some value\n     * as a reaction to an interaction with Alexa via voice, app, etc.\n     *\n     * @param event The event containing the Alexa directive as it comes from AWS Alexa Service\n     * @returns Object containing the response to be sent to Alexa Service\n     */\n    async handle(event: AlexaV3Request): Promise<AlexaResponse> {\n        this.log.debug(`handling Alexa event`);\n        this.log.silly(`${JSON.stringify(event)}`);\n\n        const property = this.allCapabilities\n            .flatMap(item => item.properties)\n            .find(property => property.matches(event));\n\n        if (property) {\n            let alexaValue: AlexaV3DirectiveValue;\n            try {\n                const setter = this.valueSetter(event);\n                alexaValue = await setter(event, property);\n            } catch (error) {\n                this.log.debug(`${error}`);\n                this.log.error(`failed handling Alexa event`);\n\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                return Promise.reject(AlexaResponse.endpointUnreachable(event.directive.header.messageId).get());\n            }\n\n            // even though the handler successfully processed the Alexa event,\n            // we return an error here for ENFORCED capabilities, to prevent\n            // reporting multiple successes for the same capability and\n            // running into a situation of returning a wrong value back to Alexa\n            if (this.enforced.find(capability => capability.matches(event))) {\n                // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n                return Promise.reject(\n                    AlexaResponse.directiveNotSupportedByControl(\n                        this.name,\n                        event?.directive?.header?.namespace,\n                        event?.directive?.header?.messageId,\n                        event?.directive?.header?.payloadVersion,\n                    ).get(),\n                );\n            }\n\n            const response = AlexaResponse.handled(\n                event,\n                property.propertyName,\n                property.reportValue(alexaValue),\n                property.instance,\n            );\n\n            // though the processed directive required to change a single value, the response must contain values of all \"relevant\" properties\n            // Please refer to this for details: https://developer.amazon.com/en-US/docs/alexa/device-apis/alexa-thermostatcontroller.html#settargettemperature-response-event\n\n            // TODO: add values of relevant properties to response\n\n            this.log.silly(`${JSON.stringify(response.get())}`);\n            return response.get();\n        }\n\n        const errorResponse = AlexaResponse.directiveNotSupportedByControl(\n            this.name,\n            event?.directive?.header?.namespace,\n            event?.directive?.header?.messageId,\n            event?.directive?.header?.payloadVersion,\n        );\n        this.log.silly(`${JSON.stringify(errorResponse.get())}`);\n        // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors\n        return Promise.reject(errorResponse.get());\n    }\n\n    valueSetter(\n        _event: AlexaV3Request,\n    ): (event: AlexaV3Request, property: PropertiesBase) => Promise<AlexaV3DirectiveValue> {\n        return this.setValue.bind(this);\n    }\n\n    async setValue(event: AlexaV3Request, property: PropertiesBase): Promise<AlexaV3DirectiveValue> {\n        // extract alexa value from event\n        const alexaValue = property.alexaDirectiveValue(event);\n\n        // convert alexa value to iobroker value\n        let value = property.value(alexaValue);\n\n        // if set, the device could support toggle\n        if (event.currentState) {\n            // console.error(`----------------------------------- command: ${value}, current value: ${JSON.stringify(event.currentState)}`);\n            const state = event.currentState.find(item => item.name === property.propertyName);\n            if (state && value === true) {\n                // it could support toggle.\n                // get current value\n                const current = property.value(state.value);\n                if (current === true) {\n                    // turn off\n                    value = false;\n                } else if (current !== false) {\n                    const currentValue = await this.getOrRetrieveCurrentValue(property);\n                    if (currentValue === true) {\n                        // turn off\n                        value = false;\n                    }\n                }\n            }\n        }\n\n        // set iobroker state\n        await this.setState(property, value!);\n\n        property.currentValue = value;\n        // return value as expected by Alexa\n        return property.alexaValue(value);\n    }\n\n    async adjustValue(event: AlexaV3Request, property: PropertiesBase): Promise<AlexaV3DirectiveValue> {\n        // extract Alexa delta value from event\n        const delta = property.alexaDirectiveValue(event);\n        // get current value\n        const currentValue = await this.getOrRetrieveCurrentValue(property);\n        // convert the current value to Alexa value\n        const valueToAdjust = property.alexaValue(currentValue);\n        // adjust Alexa value\n        const adjustedValue = ensureValueInRange_0_100(\n            parseFloat((valueToAdjust as string) || '0') + parseFloat((delta as string) || '0'),\n        );\n        // convert adjusted value to iobroker value\n        const value = property.value(adjustedValue);\n\n        // set iobroker state\n        await this.setState(property, value as ioBroker.StateValue);\n\n        return adjustedValue;\n    }\n\n    async getOrRetrieveCurrentValue(property: PropertiesBase): Promise<ioBroker.StateValue> {\n        if (property.currentValue === undefined) {\n            property.currentValue = await AdapterProvider.getState(property.getId);\n        }\n\n        if (property.currentValue === undefined) {\n            throw new Error(`unable to retrieve ${property.getId}`);\n        }\n\n        return property.currentValue;\n    }\n\n    async reportState(): Promise<AlexaV3ReportedState[]> {\n        this.log.debug(`reporting state`);\n\n        const propertiesToReport: AlexaV3ReportedState[] = [];\n\n        for (const capability of this.supported) {\n            for (const property of capability.properties) {\n                try {\n                    await this.getOrRetrieveCurrentValue(property);\n\n                    const toReport: AlexaV3ReportedState = {\n                        namespace: capability.namespace,\n                        instance: property.instance,\n                        name: property.propertyName,\n                        value: property.reportValue(property.alexaValue(property.currentValue)),\n                    };\n\n                    if (!toReport.instance) {\n                        delete toReport.instance;\n                    }\n\n                    propertiesToReport.push(toReport);\n                } catch (error) {\n                    this.log.error(`failed reporting state for property ${property.propertyName} of ${this.name}`);\n                    this.log.debug(`${error}`);\n                }\n            }\n        }\n\n        this.log.debug(`${JSON.stringify(propertiesToReport)}`);\n        return propertiesToReport;\n    }\n\n    toString(): string {\n        return `${this.constructor.name}`;\n    }\n\n    initStates(ctrl: IotExternalPatternControl): void {\n        for (const stateKey of Control.stateKeys) {\n            this._states[stateKey] = ctrl.states.find(s => s.name === stateKey);\n        }\n    }\n\n    get states(): Record<string, IotExternalDetectorState | undefined> {\n        return this._states;\n    }\n\n    get statesMap(): Record<string, string> {\n        const map: Record<string, string> = {};\n        for (const stateKey of Control.stateKeys) {\n            map[stateKey.toLowerCase()] = stateKey;\n        }\n        return map;\n    }\n\n    async setState(property: PropertiesBase, value: ioBroker.StateValue): Promise<void> {\n        await AdapterProvider.setState(property.setId, value);\n        property.currentValue = value;\n    }\n\n    //-------------------------------------------------------\n    // standard property init objects\n    //\n\n    blankInitObject(): ControlStateInitObject {\n        // const states = this.initStates(ctrl);\n        const map = this.statesMap;\n        return {\n            setState: this.states[map.actual]!,\n            getState: this.states[map.actual]!,\n        };\n    }\n\n    powerStateInitObject(): ControlStateInitObject {\n        // const states = this.initStates(ctrl);\n        const map = this.statesMap;\n\n        return {\n            setState: this.states[map.set]!,\n            getState: this.states[map.actual]!,\n            alexaSetter: function (alexaValue) {\n                return alexaValue === PowerState.ON;\n            },\n            alexaGetter: function (value) {\n                return value ? PowerState.ON : PowerState.OFF;\n            },\n        };\n    }\n\n    detectedStateInitObject(): ControlStateInitObject {\n        const map = this.statesMap;\n        return {\n            setState: this.states[map.actual]!,\n            getState: this.states[map.actual]!,\n            alexaSetter: function (_alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue | undefined {\n                // should be never called\n                return 0;\n            },\n            alexaGetter: function (value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                return value ? DetectionState.DETECTED : DetectionState.NOT_DETECTED;\n            },\n        };\n    }\n\n    percentageInitObject(): ControlStateInitObject {\n        const map = this.statesMap;\n        // const range = configuredRangeOrDefault(this.states[map.set]);\n        return {\n            setState: this.states[map.set]!,\n            getState: this.states[map.actual]!,\n            alexaSetter: function (this: PropertiesBase, alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue {\n                return (\n                    denormalize_0_100(\n                        alexaValue as number,\n                        this.valuesRangeMin as number,\n                        this.valuesRangeMax as number,\n                    ) || 0\n                );\n            },\n            alexaGetter: function (\n                this: PropertiesBase,\n                value: ioBroker.StateValue | undefined,\n            ): AlexaV3DirectiveValue {\n                return normalize_0_100(value as number, this.valuesRangeMin as number, this.valuesRangeMax as number);\n            },\n        };\n    }\n}\n"]}