{"version":3,"file":"Thermostat.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Controls/Thermostat.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AlexaV3Category, AlexaV3DirectiveValue, IotExternalDetectorState } from '../types';\nimport TemperatureSensor from '../Alexa/Capabilities/TemperatureSensor';\nimport ThermostatController from '../Alexa/Capabilities/ThermostatController';\nimport PowerController from '../Alexa/Capabilities/PowerController';\nimport AdjustableControl from './AdjustableControl';\nimport { ensureValueInRange } from '../Helpers/Utils';\nimport ThermostatMode from '../Alexa/Properties/ThermostatMode';\nimport TargetSetpoint from '../Alexa/Properties/TargetSetpoint';\nimport Temperature from '../Alexa/Properties/Temperature';\nimport PowerState from '../Alexa/Properties/PowerState';\nimport type { Base as CapabilitiesBase } from '../Alexa/Capabilities/Base';\nimport type { Base as PropertiesBase } from '../Alexa/Properties/Base';\n\nexport default class Thermostat extends AdjustableControl {\n    get categories(): AlexaV3Category[] {\n        return ['THERMOSTAT', 'TEMPERATURE_SENSOR'];\n    }\n\n    adjustableProperties(): (typeof PropertiesBase)[] {\n        return [TargetSetpoint];\n    }\n\n    initCapabilities(): CapabilitiesBase[] {\n        const result = [new TemperatureSensor(), new ThermostatController()];\n        const map = this.statesMap;\n        // if the state POWER is present, then we can switch it ON/OFF\n        if (this.states[map.power]) {\n            result.push(new PowerController());\n        }\n\n        for (const property of result.flatMap(item => item.properties)) {\n            const initObject = this.composeInitObject(property);\n            if (initObject) {\n                property.init(initObject);\n            }\n        }\n\n        return result;\n    }\n\n    composeInitObject(property: PropertiesBase):\n        | {\n              setState: IotExternalDetectorState;\n              getState: IotExternalDetectorState;\n              alexaSetter?: (alexaValue: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n              alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n              supportedModes?: string[];\n          }\n        | undefined {\n        const map = this.statesMap;\n\n        if (property.propertyName === PowerState.propertyName) {\n            return {\n                setState: this.states[map.power] || this.states[map.set]!,\n                getState: this.states[map.power] || this.states[map.set]!,\n                alexaSetter: function (this: PropertiesBase, alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue {\n                    return alexaValue === PowerState.ON;\n                },\n                alexaGetter: function (value) {\n                    return value ? PowerState.ON : PowerState.OFF;\n                },\n            };\n        }\n\n        if (property.propertyName === Temperature.propertyName) {\n            return {\n                setState: this.states[map.set]!,\n                getState: this.states[map.actual] || this.states[map.set]!,\n            };\n        }\n\n        if (property.propertyName === TargetSetpoint.propertyName) {\n            return {\n                setState: this.states[map.set]!,\n                getState: this.states[map.actual] || this.states[map.set]!,\n                alexaSetter: function (this: PropertiesBase, alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue {\n                    return ensureValueInRange(\n                        alexaValue as number,\n                        this.valuesRangeMin as number,\n                        this.valuesRangeMax as number,\n                    );\n                },\n                alexaGetter: function (value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                    return value as number;\n                },\n            };\n        }\n\n        if (property.propertyName === ThermostatMode.propertyName) {\n            return {\n                setState: this.states[map.mode] || ({ id: undefined } as unknown as IotExternalDetectorState),\n                getState: this.states[map.mode] || ({ id: undefined } as unknown as IotExternalDetectorState),\n                alexaSetter: function (this: PropertiesBase, _alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue {\n                    return 0;\n                },\n                alexaGetter: function (_value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                    return ThermostatMode.AUTO;\n                },\n                supportedModes: [ThermostatMode.AUTO],\n            };\n        }\n    }\n}\n"]}