{"version":3,"file":"AirCondition.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Controls/AirCondition.ts"],"names":[],"mappings":"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","sourcesContent":["import ThermostatController from '../Alexa/Capabilities/ThermostatController';\nimport ThermostatMode from '../Alexa/Properties/ThermostatMode';\nimport PowerController from '../Alexa/Capabilities/PowerController';\nimport type { Base as CapabilitiesBase } from '../Alexa/Capabilities/Base';\nimport TemperatureSensor from '../Alexa/Capabilities/TemperatureSensor';\nimport Temperature from '../Alexa/Properties/Temperature';\nimport PowerState from '../Alexa/Properties/PowerState';\nimport AdjustableControl from './AdjustableControl';\nimport { ensureValueInRange } from '../Helpers/Utils';\nimport TargetSetpoint from '../Alexa/Properties/TargetSetpoint';\nimport type { Base as PropertiesBase } from '../Alexa/Properties/Base';\nimport AdapterProvider from '../Helpers/AdapterProvider';\nimport type { AlexaV3Category, AlexaV3DirectiveValue, IotExternalDetectorState } from '../types';\n\nexport default class AirCondition extends AdjustableControl {\n    private _thermostatController: ThermostatController | undefined;\n    private _thermostatMode: ThermostatMode | undefined;\n    private _powerController: PowerController | undefined;\n    private _powerState: PowerState | undefined;\n    private _lastKnownMode: number | string | undefined;\n\n    get categories(): AlexaV3Category[] {\n        return ['AIR_CONDITIONER'];\n    }\n\n    adjustableProperties(): (typeof PropertiesBase)[] {\n        return [TargetSetpoint];\n    }\n\n    get dedicatedOnOff(): boolean {\n        return this.states[this.statesMap.power] !== undefined;\n    }\n\n    initCapabilities(): CapabilitiesBase[] {\n        this._thermostatController = new ThermostatController();\n        this._thermostatMode = this._thermostatController.thermostatMode;\n        this._powerController = new PowerController();\n        this._powerState = this._powerController.powerState;\n        const result: CapabilitiesBase[] = [new TemperatureSensor(), this._thermostatController, this._powerController];\n        for (const property of result.flatMap(item => item.properties)) {\n            const initObject = this.composeInitObject(property);\n            if (initObject) {\n                property.init(initObject);\n            } else {\n                throw new Error(`Unable to initialize property ${property.propertyName}`);\n            }\n        }\n        return result;\n    }\n\n    async setState(property: PropertiesBase, value: ioBroker.StateValue | undefined): Promise<void> {\n        // if we set power ON/OFF via thermostat mode\n        if (property.propertyName === PowerState.propertyName && !this.dedicatedOnOff) {\n            // set the mode to the last known value or AUTO by switching power ON\n            if (value) {\n                this._lastKnownMode ||= this._thermostatMode!.supportedModesAsEnum[ThermostatMode.AUTO];\n                await AdapterProvider.setState(this._thermostatMode!.setId, this._lastKnownMode);\n                this._thermostatMode!.currentValue = this._lastKnownMode;\n                this._powerState!.currentValue = true;\n            } else {\n                // set mode to OFF\n                const modeOffValue = this._thermostatMode!.supportedModesAsEnum[ThermostatMode.OFF];\n                await AdapterProvider.setState(this._thermostatMode!.setId, modeOffValue);\n                this._thermostatMode!.currentValue = this._lastKnownMode;\n                this._powerState!.currentValue = false;\n            }\n        } else {\n            // just set the property\n            await AdapterProvider.setState(property.setId, value!);\n            property.currentValue = value;\n\n            if (property.propertyName === ThermostatMode.propertyName) {\n                this._lastKnownMode = value as string;\n                if (!this.dedicatedOnOff) {\n                    this._powerState!.currentValue =\n                        value !== this._thermostatMode!.supportedModesAsEnum[ThermostatMode.OFF];\n                }\n            }\n        }\n    }\n\n    async getOrRetrieveCurrentValue(property: PropertiesBase): Promise<ioBroker.StateValue> {\n        if (property.currentValue === undefined) {\n            property.currentValue = await AdapterProvider.getState(property.getId);\n\n            // convert mode != OFF to power = true\n            if (property.propertyName === this._powerState!.propertyName && !this.dedicatedOnOff) {\n                property.currentValue =\n                    property.currentValue !== this._thermostatMode!.supportedModesAsEnum[ThermostatMode.OFF];\n            }\n        }\n\n        if (property.currentValue === undefined) {\n            throw new Error(`unable to retrieve ${property.getId}`);\n        }\n\n        return property.currentValue;\n    }\n\n    composeInitObject(property: PropertiesBase):\n        | {\n              setState: IotExternalDetectorState;\n              getState: IotExternalDetectorState;\n              alexaSetter?: (alexaValue: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n              alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n              supportedModes?: string[];\n          }\n        | undefined {\n        const map = this.statesMap;\n\n        if (property.propertyName === PowerState.propertyName) {\n            return {\n                setState: this.states[map.power] || this.states[map.mode]!,\n                getState: this.states[map.power] || this.states[map.mode]!,\n                alexaSetter: function (alexaValue: AlexaV3DirectiveValue): boolean {\n                    return alexaValue === PowerState.ON;\n                },\n                alexaGetter: function (value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                    return value ? PowerState.ON : PowerState.OFF;\n                },\n            };\n        }\n\n        if (property.propertyName === Temperature.propertyName) {\n            return {\n                setState: this.states[map.set]!,\n                getState: this.states[map.actual] || this.states[map.set]!,\n            };\n        }\n\n        if (property.propertyName === TargetSetpoint.propertyName) {\n            // const range = Utils.configuredRangeOrDefault(this.states[map.set]);\n            return {\n                setState: this.states[map.set]!,\n                getState: this.states[map.actual] || this.states[map.set]!,\n                alexaSetter: function (this: PropertiesBase, alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue {\n                    return ensureValueInRange(\n                        alexaValue as number,\n                        this.valuesRangeMin as number,\n                        this.valuesRangeMax as number,\n                    );\n                },\n                alexaGetter: function (value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                    return value || 0;\n                },\n            };\n        }\n\n        if (property.propertyName === ThermostatMode.propertyName) {\n            return {\n                setState: this.states[map.mode]!,\n                getState: this.states[map.mode]!,\n                alexaSetter: function (\n                    this: PropertiesBase,\n                    alexaValue: AlexaV3DirectiveValue,\n                ): ioBroker.StateValue | undefined {\n                    return this.supportedModesAsEnum[alexaValue as string];\n                },\n                alexaGetter: function (\n                    this: PropertiesBase,\n                    value: ioBroker.StateValue | undefined,\n                ): AlexaV3DirectiveValue {\n                    return this.supportedModesAsEnum[value as string];\n                },\n                supportedModes: [\n                    ThermostatMode.AUTO,\n                    ThermostatMode.COOL,\n                    ThermostatMode.ECO,\n                    ThermostatMode.HEAT,\n                    ThermostatMode.OFF,\n                ],\n            };\n        }\n    }\n}\n"]}