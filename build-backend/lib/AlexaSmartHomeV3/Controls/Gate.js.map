{"version":3,"file":"Gate.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Controls/Gate.ts"],"names":[],"mappings":";;;;;AAAA,yEAAiD;AACjD,qEAAwC;AACxC,wDAAgC;AAKhC,MAAqB,IAAK,SAAQ,iBAAO;IACrC,IAAI,UAAU;QACV,OAAO,CAAC,aAAa,CAAC,CAAC;IAC3B,CAAC;IAED,gBAAgB;QACZ,MAAM,MAAM,GAAG,CAAC,IAAI,sBAAY,CAAC,cAAc,EAAE,CAAC,CAAC;QACnD,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;YAC7D,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;QACzC,CAAC;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,cAAc;QAQV,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3B,MAAM,IAAI,GAAG,eAAe,CAAC;QAE7B,OAAO;YACH,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAE;YAC/B,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAE;YAC/B,WAAW,EAAE,UAAU,UAAU;gBAC7B,OAAO,UAAU,KAAK,GAAG,IAAI,IAAI,oBAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;YACxD,CAAC;YACD,WAAW,EAAE,UAAU,KAAK;gBACxB,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,oBAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,oBAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACnF,CAAC;YACD,QAAQ,EAAE,IAAI;YACd,cAAc,EAAE,CAAC,IAAI,oBAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,oBAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACjE,CAAC;IACN,CAAC;CACJ;AArCD,uBAqCC","sourcesContent":["import Capabilities from '../Alexa/Capabilities';\nimport Modes from '../Alexa/ModeValues';\nimport Control from './Control';\nimport type { Base as CapabilitiesBase } from '../Alexa/Capabilities/Base';\nimport type { Base as ModeBase } from '../Alexa/ModeValues/Base';\nimport type { AlexaV3Category, AlexaV3DirectiveValue, IotExternalDetectorState } from '../types';\n\nexport default class Gate extends Control {\n    get categories(): AlexaV3Category[] {\n        return ['GARAGE_DOOR'];\n    }\n\n    initCapabilities(): CapabilitiesBase[] {\n        const result = [new Capabilities.ModeController()];\n        for (const property of result.flatMap(item => item.properties)) {\n            property.init(this.modeInitObject());\n        }\n        return result;\n    }\n\n    modeInitObject(): {\n        setState: IotExternalDetectorState;\n        getState: IotExternalDetectorState;\n        alexaSetter?: (alexaValue: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n        alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n        instance?: string;\n        supportedModes?: ModeBase[];\n    } {\n        const map = this.statesMap;\n        const mode = 'Gate.Position';\n\n        return {\n            setState: this.states[map.set]!,\n            getState: this.states[map.set]!,\n            alexaSetter: function (alexaValue) {\n                return alexaValue === `${mode}.${Modes.Open.value}`;\n            },\n            alexaGetter: function (value) {\n                return value ? `${mode}.${Modes.Open.value}` : `${mode}.${Modes.Closed.value}`;\n            },\n            instance: mode,\n            supportedModes: [new Modes.Open(mode), new Modes.Closed(mode)],\n        };\n    }\n}\n"]}