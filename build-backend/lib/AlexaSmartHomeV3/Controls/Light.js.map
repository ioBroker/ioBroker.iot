{"version":3,"file":"Light.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Controls/Light.ts"],"names":[],"mappings":";;;;;AAAA,yEAAiD;AACjD,wDAAgC;AAIhC,MAAqB,KAAM,SAAQ,iBAAO;IACtC,IAAI,UAAU;QACV,OAAO,CAAC,OAAO,CAAC,CAAC;IACrB,CAAC;IAED,gBAAgB;QACZ,MAAM,MAAM,GAAG,CAAC,IAAI,sBAAY,CAAC,eAAe,EAAE,CAAC,CAAC;QAEpD,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;YAC7D,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAC/C,CAAC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,wBAAwB;QACpB,MAAM,MAAM,GAAG,CAAC,IAAI,sBAAY,CAAC,oBAAoB,EAAE,CAAC,CAAC;QACzD,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;YAC7D,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAC/C,CAAC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,IAAI,SAAS;QAIT,OAAO;YACH,GAAG,EAAE,KAAK;YACV,MAAM,EAAE,WAAW;SACtB,CAAC;IACN,CAAC;IAED,oBAAoB;QAMhB,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;QAE3B,OAAO;YACH,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAE;YAC/B,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAE;YAClC,WAAW,EAAE,UAAU,UAAiC;gBACpD,OAAQ,UAAqB,GAAG,CAAC,CAAC;YACtC,CAAC;YACD,WAAW,EAAE,UAAU,KAAsC;gBACzD,OAAO,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,CAAC;SACJ,CAAC;IACN,CAAC;CACJ;AArDD,wBAqDC","sourcesContent":["import Capabilities from '../Alexa/Capabilities';\nimport Control from './Control';\nimport type { AlexaV3Category, AlexaV3DirectiveValue, IotExternalDetectorState } from '../types';\nimport type { Base as CapabilitiesBase } from '../Alexa/Capabilities/Base';\n\nexport default class Light extends Control {\n    get categories(): AlexaV3Category[] {\n        return ['LIGHT'];\n    }\n\n    initCapabilities(): CapabilitiesBase[] {\n        const result = [new Capabilities.PowerController()];\n\n        for (const property of result.flatMap(item => item.properties)) {\n            property.init(this.powerStateInitObject());\n        }\n\n        return result;\n    }\n\n    initEnforcedCapabilities(): CapabilitiesBase[] {\n        const result = [new Capabilities.BrightnessController()];\n        for (const property of result.flatMap(item => item.properties)) {\n            property.init(this.brightnessInitObject());\n        }\n\n        return result;\n    }\n\n    get statesMap(): {\n        set: string;\n        actual: string;\n    } {\n        return {\n            set: 'SET',\n            actual: 'ON_ACTUAL',\n        };\n    }\n\n    brightnessInitObject(): {\n        setState: IotExternalDetectorState;\n        getState: IotExternalDetectorState;\n        alexaSetter?: (alexaValue: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n        alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n    } {\n        const map = this.statesMap;\n\n        return {\n            setState: this.states[map.set]!,\n            getState: this.states[map.actual]!,\n            alexaSetter: function (alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue | undefined {\n                return (alexaValue as number) > 0;\n            },\n            alexaGetter: function (value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                return value ? 100 : 0;\n            },\n        };\n    }\n}\n"]}