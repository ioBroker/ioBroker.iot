{"version":3,"file":"Ct.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Controls/Ct.ts"],"names":[],"mappings":"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","sourcesContent":["import Capabilities from '../Alexa/Capabilities';\nimport { configuredRangeOrDefault, denormalize_0_100, normalize_0_100, closestFromList } from '../Helpers/Utils';\nimport AdapterProvider from '../Helpers/AdapterProvider';\nimport AdjustableControl from './AdjustableControl';\nimport type { Base as CapabilitiesBase } from '../Alexa/Capabilities/Base';\nimport type { Base as PropertiesBase } from '../Alexa/Properties/Base';\nimport type BrightnessController from '../Alexa/Capabilities/BrightnessController';\nimport Brightness from '../Alexa/Properties/Brightness';\nimport ColorTemperatureInKelvin from '../Alexa/Properties/ColorTemperatureInKelvin';\nimport type ColorTemperatureController from '../Alexa/Capabilities/ColorTemperatureController';\nimport type PowerController from '../Alexa/Capabilities/PowerController';\nimport PowerState from '../Alexa/Properties/PowerState';\nimport type { AlexaV3Category, AlexaV3DirectiveValue, AlexaV3Request, IotExternalDetectorState } from '../types';\n\nexport default class Ct extends AdjustableControl {\n    private _brightnessCapability: BrightnessController | undefined;\n    private _brightness: Brightness | undefined;\n    private _colorTemperatureCapability: ColorTemperatureController | undefined;\n    private _powerControllerCapability: PowerController | undefined;\n    private _powerState: PowerState | undefined;\n\n    get categories(): AlexaV3Category[] {\n        return ['LIGHT'];\n    }\n\n    adjustableProperties(): (typeof PropertiesBase)[] {\n        return [ColorTemperatureInKelvin];\n    }\n\n    initCapabilities(): CapabilitiesBase[] {\n        const map = this.statesMap;\n        const result = [new Capabilities.ColorController()];\n\n        // if the state DIMMER or BRIGHTNESS configured\n        if (this.states[map.dimmer] || this.states[map.brightness]) {\n            this._brightnessCapability = new Capabilities.BrightnessController();\n            this._brightness = this._brightnessCapability.brightness;\n            result.push(this._brightnessCapability);\n        }\n\n        // if the state TEMPERATURE configured\n        if (this.states[map.temperature]) {\n            this._colorTemperatureCapability = new Capabilities.ColorTemperatureController();\n            result.push(this._colorTemperatureCapability);\n        }\n\n        // if the state ON, DIMMER or BRIGHTNESS configured\n        if (this.states[map.on] || this._brightness) {\n            this._powerControllerCapability = new Capabilities.PowerController();\n            this._powerState = this._powerControllerCapability.powerState;\n            result.push(this._powerControllerCapability);\n        }\n\n        for (const property of result.flatMap(item => item.properties)) {\n            const initObject = this.composeInitObject(property);\n            if (initObject) {\n                property.init(initObject);\n            }\n        }\n\n        return result;\n    }\n\n    async getOrRetrieveCurrentValue(property: PropertiesBase): Promise<ioBroker.StateValue> {\n        const map = this.statesMap;\n\n        if (property.currentValue === undefined) {\n            property.currentValue = await AdapterProvider.getState(property.getId);\n            // convert the non-zero brightness to power = true\n            if (property.propertyName === PowerState.propertyName && !this.states[map.on]) {\n                property.currentValue = property.currentValue !== 0;\n            }\n        }\n\n        if (property.currentValue === undefined) {\n            throw new Error(`unable to retrieve ${property.getId}`);\n        }\n\n        return property.currentValue;\n    }\n\n    async setState(property: PropertiesBase, value: ioBroker.StateValue): Promise<void> {\n        const map = this.statesMap;\n\n        if (property.propertyName === PowerState.propertyName) {\n            if (this.states[map.on]) {\n                await AdapterProvider.setState(property.setId, value);\n                property.currentValue = value;\n            } else {\n                if (!this._brightness) {\n                    throw new Error('No brightness property configured');\n                }\n                if (!this._powerState) {\n                    throw new Error('No powerState property configured');\n                }\n\n                if (value) {\n                    // set brightness\n                    // set byOn to the configured value or range.max otherwise\n                    const range = configuredRangeOrDefault(this.states[map.dimmer] || this.states[map.brightness]!);\n                    const smartName = (this.states[map.dimmer] || this.states[map.brightness])?.smartName;\n                    let byOn: number | string | undefined | null;\n                    if (smartName && typeof smartName === 'object') {\n                        byOn = smartName.byON;\n                    } else {\n                        byOn = undefined;\n                    }\n                    if (byOn === undefined || byOn === null || isNaN(byOn as unknown as number)) {\n                        byOn = range.max as number | string | undefined | null;\n                    } else {\n                        byOn = parseFloat(byOn);\n                    }\n                    await AdapterProvider.setState(this._brightness.setId, byOn ?? 100);\n                    this._brightness.currentValue = byOn;\n                    this._powerState.currentValue = true;\n                } else {\n                    // set brightness to 0 on power OFF\n                    await AdapterProvider.setState(this._brightness.setId, 0);\n                    this._brightness.currentValue = 0;\n                    this._powerState.currentValue = false;\n                }\n            }\n        } else if (\n            property.propertyName === Brightness.propertyName ||\n            property.propertyName === ColorTemperatureInKelvin.propertyName\n        ) {\n            await AdapterProvider.setState(property.setId, value);\n            property.currentValue = value;\n        }\n    }\n\n    async adjustValue(event: AlexaV3Request, property: PropertiesBase): Promise<AlexaV3DirectiveValue> {\n        // extract Alexa delta value from event\n        const delta = property.alexaDirectiveValue(event);\n\n        // convert delta to iobroker value\n        const value = property.value(delta);\n\n        // set iobroker state\n        await this.setState(property, value ?? 0);\n\n        return value as AlexaV3DirectiveValue;\n    }\n\n    composeInitObject(property: PropertiesBase):\n        | {\n              setState: IotExternalDetectorState;\n              getState: IotExternalDetectorState;\n              alexaSetter?: (alexaValue: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n              alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n          }\n        | undefined {\n        const map = this.statesMap;\n\n        if (property.propertyName === PowerState.propertyName) {\n            return {\n                setState: this.states[map.on] || this.states[map.dimmer] || this.states[map.brightness]!,\n                getState: this.states[map.on] || this.states[map.dimmer] || this.states[map.brightness]!,\n                alexaSetter: function (this: PropertiesBase, alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue {\n                    return alexaValue === PowerState.ON;\n                },\n                alexaGetter: function (value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                    return value ? PowerState.ON : PowerState.OFF;\n                },\n            };\n        }\n\n        if (property.propertyName === Brightness.propertyName) {\n            return {\n                setState: this.states[map.dimmer] || this.states[map.brightness]!,\n                getState: this.states[map.dimmer] || this.states[map.brightness]!,\n                alexaSetter: function (this: PropertiesBase, alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue {\n                    return (\n                        denormalize_0_100(\n                            alexaValue as number,\n                            this.valuesRangeMin as number,\n                            this.valuesRangeMax as number,\n                        ) ?? 0\n                    );\n                },\n                alexaGetter: function (\n                    this: PropertiesBase,\n                    value: ioBroker.StateValue | undefined,\n                ): AlexaV3DirectiveValue {\n                    return normalize_0_100(\n                        value as number,\n                        this.valuesRangeMin as number,\n                        this.valuesRangeMax as number,\n                    );\n                },\n            };\n        }\n\n        if (property.propertyName === ColorTemperatureInKelvin.propertyName) {\n            return {\n                setState: this.states[map.temperature]!,\n                getState: this.states[map.temperature]!,\n                alexaSetter: function (\n                    this: ColorTemperatureInKelvin,\n                    alexaValue: AlexaV3DirectiveValue,\n                ): ioBroker.StateValue {\n                    if (alexaValue === 1) {\n                        // increase directive\n                        const closest = closestFromList(\n                            (this.currentValue as number) || this.colorTemperatureTable[0],\n                            this.colorTemperatureTable,\n                        );\n                        let index = this.colorTemperatureTable.indexOf(closest) + 1;\n                        index =\n                            index >= this.colorTemperatureTable.length ? this.colorTemperatureTable.length - 1 : index;\n                        return this.colorTemperatureTable[index];\n                    }\n                    if (alexaValue === -1) {\n                        // decrease directive\n                        const closest = closestFromList(\n                            (this.currentValue as number) || this.colorTemperatureTable[0],\n                            this.colorTemperatureTable,\n                        );\n                        let index = this.colorTemperatureTable.indexOf(closest) - 1;\n                        index = index < 0 ? 0 : index;\n                        return this.colorTemperatureTable[index];\n                    }\n\n                    return alexaValue as number;\n                },\n                alexaGetter: function (value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                    return value as number;\n                },\n            };\n        }\n    }\n}\n"]}