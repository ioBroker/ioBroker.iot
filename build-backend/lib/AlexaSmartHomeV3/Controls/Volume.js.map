{"version":3,"file":"Volume.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Controls/Volume.ts"],"names":[],"mappings":"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","sourcesContent":["import Speaker from '../Alexa/Capabilities/Speaker';\nimport Properties from '../Alexa/Properties';\nimport type { Base as PropertiesBase } from '../Alexa/Properties/Base';\nimport { Volume as PropertiesVolume } from '../Alexa/Properties/Volume';\nimport AdapterProvider from '../Helpers/AdapterProvider';\nimport { denormalize_0_100, normalize_0_100 } from '../Helpers/Utils';\nimport AdjustableControl from './AdjustableControl';\nimport type { Base as CapabilitiesBase } from '../Alexa/Capabilities/Base';\nimport type { AlexaV3Category, AlexaV3DirectiveValue, IotExternalDetectorState } from '../types';\n\nexport default class Volume extends AdjustableControl {\n    private _speaker: Speaker | undefined;\n    private _lastVolume: ioBroker.StateValue | undefined;\n\n    get categories(): AlexaV3Category[] {\n        return ['SPEAKER'];\n    }\n\n    adjustableProperties(): (typeof PropertiesBase)[] {\n        return [PropertiesVolume];\n    }\n\n    initCapabilities(): CapabilitiesBase[] {\n        this._speaker = new Speaker();\n        const result = [this._speaker];\n        for (const property of result.flatMap(item => item.properties)) {\n            const intiOption = this.composeInitObject(property);\n            if (intiOption) {\n                property.init(intiOption);\n            }\n        }\n\n        return result;\n    }\n\n    async setState(property: PropertiesBase, value: ioBroker.StateValue | undefined): Promise<void> {\n        // set the property itself\n        await AdapterProvider.setState(property.setId, value!);\n        property.currentValue = value;\n\n        if (property.propertyName === Properties.Muted.propertyName) {\n            if (!this._speaker) {\n                throw new Error('Muted property name is missing');\n            }\n            // set volume\n            if (value) {\n                // set volume to 0 on MUTED true\n                await AdapterProvider.setState(this._speaker.volume.setId, 0);\n                this._lastVolume = this._speaker.volume.currentValue;\n                this._speaker.volume.currentValue = 0;\n            } else {\n                // set volume to the last known, configured or 20 otherwise on MUTED false\n                if (this._lastVolume === undefined) {\n                    const smartName = this.states[this.statesMap.set]!.smartName;\n                    if (typeof smartName === 'object' && smartName && smartName.byON !== undefined) {\n                        this._lastVolume = smartName.byON;\n                    }\n                    this._lastVolume =\n                        this._lastVolume === undefined || isNaN(this._lastVolume as unknown as number)\n                            ? denormalize_0_100(\n                                  20,\n                                  this._speaker.volume.valuesRangeMin as number,\n                                  this._speaker.volume.valuesRangeMax as number,\n                              )\n                            : parseInt(this._lastVolume as string, 10);\n                }\n                await AdapterProvider.setState(this._speaker.volume.setId, this._lastVolume as number);\n                this._speaker.volume.currentValue = this._lastVolume;\n            }\n        } else {\n            // set muted\n            const muted = value === 0;\n            // only on different IDs for volume and muted\n            if (this._speaker!.volume.setId !== this._speaker!.muted.setId) {\n                await AdapterProvider.setState(this._speaker!.muted.setId, muted);\n            }\n            this._speaker!.muted.currentValue = muted;\n        }\n    }\n\n    async getOrRetrieveCurrentValue(property: PropertiesBase): Promise<ioBroker.StateValue> {\n        if (property.currentValue === undefined) {\n            property.currentValue = await AdapterProvider.getState(property.getId);\n\n            // convert non zero volumes to muted = false\n            if (\n                property.propertyName === this._speaker!.muted.propertyName &&\n                property.getId === this._speaker!.volume.getId\n            ) {\n                property.currentValue = property.currentValue === 0;\n            }\n        }\n\n        if (property.currentValue === undefined) {\n            throw new Error(`unable to retrieve ${property.getId}`);\n        }\n\n        return property.currentValue;\n    }\n\n    composeInitObject(property: PropertiesBase):\n        | {\n              setState: IotExternalDetectorState;\n              getState: IotExternalDetectorState;\n              alexaSetter?: (alexaValue: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n              alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n          }\n        | undefined {\n        const map = this.statesMap;\n\n        if (property.propertyName === Properties.Volume.propertyName) {\n            return {\n                setState: this.states[map.set]!,\n                getState: this.states[map.actual] || this.states[map.set]!,\n                alexaSetter: function (\n                    this: PropertiesBase,\n                    alexaValue: AlexaV3DirectiveValue,\n                ): ioBroker.StateValue | undefined {\n                    return denormalize_0_100(\n                        alexaValue as number,\n                        this.valuesRangeMin as number,\n                        this.valuesRangeMax as number,\n                    );\n                },\n                alexaGetter: function (\n                    this: PropertiesBase,\n                    value: ioBroker.StateValue | undefined,\n                ): AlexaV3DirectiveValue {\n                    return normalize_0_100(\n                        value as number,\n                        this.valuesRangeMin as number,\n                        this.valuesRangeMax as number,\n                    );\n                },\n            };\n        }\n\n        if (property.propertyName === Properties.Muted.propertyName) {\n            return {\n                setState: this.states[map.mute] || this.states[map.set]!,\n                getState: this.states[map.mute] || this.states[map.set]!,\n                alexaSetter: function (alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue | undefined {\n                    return alexaValue as boolean;\n                },\n                alexaGetter: function (value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                    return value as boolean;\n                },\n            };\n        }\n    }\n}\n"]}