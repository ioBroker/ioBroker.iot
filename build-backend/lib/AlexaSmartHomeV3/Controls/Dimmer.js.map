{"version":3,"file":"Dimmer.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Controls/Dimmer.ts"],"names":[],"mappings":"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","sourcesContent":["import PowerController from '../Alexa/Capabilities/PowerController';\nimport BrightnessController from '../Alexa/Capabilities/BrightnessController';\nimport AdjustableControl from './AdjustableControl';\nimport { configuredRangeOrDefault, denormalize_0_100, normalize_0_100 } from '../Helpers/Utils';\nimport PowerState from '../Alexa/Properties/PowerState';\nimport Brightness from '../Alexa/Properties/Brightness';\nimport AdapterProvider from '../Helpers/AdapterProvider';\nimport type { AlexaV3Category, AlexaV3DirectiveValue, IotExternalDetectorState } from '../types';\nimport type { Base as CapabilitiesBase } from '../Alexa/Capabilities/Base';\nimport type { Base as PropertiesBase } from '../Alexa/Properties/Base';\n\nexport default class Dimmer extends AdjustableControl {\n    private _powerControllerCapability!: PowerController;\n    private _powerState!: PowerState;\n    private _brightnessCapability!: BrightnessController;\n    private _brightness!: Brightness;\n\n    get categories(): AlexaV3Category[] {\n        return ['LIGHT'];\n    }\n\n    adjustableProperties(): (typeof PropertiesBase)[] {\n        return [Brightness];\n    }\n\n    initCapabilities(): CapabilitiesBase[] {\n        this._powerControllerCapability = new PowerController();\n        this._powerState = this._powerControllerCapability.powerState;\n\n        this._brightnessCapability = new BrightnessController();\n        this._brightness = this._brightnessCapability.brightness;\n\n        const result = [this._powerControllerCapability, this._brightnessCapability];\n        for (const property of result.flatMap(item => item.properties)) {\n            const initObj = this.composeInitObject(property);\n            if (initObj) {\n                property.init(initObj);\n            }\n        }\n\n        return result;\n    }\n\n    async setState(property: PropertiesBase, value: ioBroker.StateValue): Promise<void> {\n        // set the property itself\n        await AdapterProvider.setState(property.setId, value);\n        property.currentValue = value;\n        const valuesRange = configuredRangeOrDefault(this.states[this.statesMap.set]!);\n\n        // todo: use adapter.config.deviceOffLevel\n        // If\n\n        if (property.propertyName === PowerState.propertyName) {\n            // set brightness\n            if (value) {\n                const smartName = this.states[this.statesMap.set]!.smartName;\n                let byOn: string | number | undefined | null;\n                if (smartName && typeof smartName === 'object') {\n                    byOn = smartName.byON;\n                }\n                // set byOn to the configured value or 100 otherwise\n                byOn =\n                    byOn === undefined || byOn === null || isNaN(byOn as number)\n                        ? (valuesRange.max as number)\n                        : parseFloat(byOn as string);\n                await AdapterProvider.setState(this._brightness.setId, byOn);\n                this._brightness.currentValue = byOn;\n            } else {\n                // set brightness to 0 on power OFF\n                await AdapterProvider.setState(this._brightness.setId, valuesRange.min);\n                this._brightness.currentValue = valuesRange.min;\n            }\n        } else {\n            // set power\n            const powerValue = value !== valuesRange.min;\n\n            // only do this on different IDs for brightness and power\n            if (this._brightness.setId !== this._powerState.setId) {\n                await AdapterProvider.setState(this._powerState.setId, powerValue);\n            }\n            this._powerState.currentValue = powerValue;\n        }\n    }\n\n    async getOrRetrieveCurrentValue(property: PropertiesBase): Promise<ioBroker.StateValue> {\n        if (property.currentValue === undefined) {\n            property.currentValue = await AdapterProvider.getState(property.getId);\n\n            const valuesRange = configuredRangeOrDefault(this.states[this.statesMap.set]!);\n            // convert non-zero brightness to power = true\n            if (property.propertyName === this._powerState.propertyName && property.getId === this._brightness.getId) {\n                property.currentValue = property.currentValue !== valuesRange.min;\n            }\n        }\n\n        if (property.currentValue === undefined) {\n            throw new Error(`unable to retrieve ${property.getId}`);\n        }\n\n        return property.currentValue;\n    }\n\n    composeInitObject(property: PropertiesBase):\n        | {\n              setState: IotExternalDetectorState;\n              getState: IotExternalDetectorState;\n              alexaSetter?: (alexaValue: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n              alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n          }\n        | undefined {\n        /*\n            Device of type 'dimmer' can be switched 'ON'/'OFF' and its brightness can be set to a value between 0 and 100.\n\n            If there is no 'ON_SET' state available:\n            - switching control 'OFF' is done via setting its brightness to 0\n            - switching control 'ON' is done via setting its brightness to the configured 'byOn' value or to the last known brightness.\n        */\n\n        const map = this.statesMap;\n\n        if (property.propertyName === PowerState.propertyName) {\n            return {\n                setState: this.states[map.on_set] || this.states[map.set]!,\n                getState: this.states[map.on_actual] || this.states[map.on_set] || this.states[map.set]!,\n                alexaSetter: function (this: PropertiesBase, alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue {\n                    return alexaValue === PowerState.ON;\n                },\n                alexaGetter: function (value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n                    return value ? PowerState.ON : PowerState.OFF;\n                },\n            };\n        }\n\n        if (property.propertyName === Brightness.propertyName) {\n            return {\n                setState: this.states[map.set]!,\n                getState: this.states[map.actual]!,\n                alexaSetter: function (this: PropertiesBase, alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue {\n                    return (\n                        denormalize_0_100(\n                            alexaValue as number,\n                            this.valuesRangeMin as number,\n                            this.valuesRangeMax as number,\n                        ) ?? 0\n                    );\n                },\n                alexaGetter: function (\n                    this: PropertiesBase,\n                    value: ioBroker.StateValue | undefined,\n                ): AlexaV3DirectiveValue {\n                    return normalize_0_100(\n                        value as number,\n                        this.valuesRangeMin as number,\n                        this.valuesRangeMax as number,\n                    );\n                },\n            };\n        }\n    }\n}\n"]}