{"version":3,"file":"Lock.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Controls/Lock.ts"],"names":[],"mappings":";;;;;AAAA,yEAAiD;AACjD,qEAA6C;AAC7C,wDAAgC;AAIhC,MAAqB,IAAK,SAAQ,iBAAO;IACrC,IAAI,UAAU;QACV,OAAO,CAAC,WAAW,CAAC,CAAC;IACzB,CAAC;IAED,gBAAgB;QACZ,MAAM,MAAM,GAAG,CAAC,IAAI,sBAAY,CAAC,cAAc,EAAE,CAAC,CAAC;QACnD,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;YAC7D,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAC9C,CAAC;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,mBAAmB;QAMf,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC;QAC3B,OAAO;YACH,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAE;YAC/B,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAE;YAClC,WAAW,EAAE,UAAU,UAAU;gBAC7B,OAAO,UAAU,KAAK,oBAAU,CAAC,SAAS,CAAC,MAAM,CAAC;YACtD,CAAC;YACD,WAAW,EAAE,UAAU,KAAK;gBACxB,OAAO,KAAK,CAAC,CAAC,CAAC,oBAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAU,CAAC,SAAS,CAAC,MAAM,CAAC;YAC/E,CAAC;SACJ,CAAC;IACN,CAAC;CACJ;AA/BD,uBA+BC","sourcesContent":["import Capabilities from '../Alexa/Capabilities';\nimport Properties from '../Alexa/Properties';\nimport Control from './Control';\nimport type { Base as CapabilitiesBase } from '../Alexa/Capabilities/Base';\nimport type { AlexaV3Category, AlexaV3DirectiveValue, IotExternalDetectorState } from '../types';\n\nexport default class Lock extends Control {\n    get categories(): AlexaV3Category[] {\n        return ['SMARTLOCK'];\n    }\n\n    initCapabilities(): CapabilitiesBase[] {\n        const result = [new Capabilities.LockController()];\n        for (const property of result.flatMap(item => item.properties)) {\n            property.init(this.lockStateInitObject());\n        }\n        return result;\n    }\n\n    lockStateInitObject(): {\n        setState: IotExternalDetectorState;\n        getState: IotExternalDetectorState;\n        alexaSetter?: (alexaValue: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n        alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n    } {\n        const map = this.statesMap;\n        return {\n            setState: this.states[map.set]!,\n            getState: this.states[map.actual]!,\n            alexaSetter: function (alexaValue) {\n                return alexaValue === Properties.LockState.UNLOCK;\n            },\n            alexaGetter: function (value) {\n                return value ? Properties.LockState.UNLOCKED : Properties.LockState.LOCKED;\n            },\n        };\n    }\n}\n"]}