{"version":3,"file":"Mode.js","sourceRoot":"","sources":["../../../../../src/lib/AlexaSmartHomeV3/Alexa/Properties/Mode.ts"],"names":[],"mappings":";;;;;AAAA,kDAA2D;AAS3D,MAAqB,IAAK,SAAQ,cAAI;IAC1B,eAAe,GAKjB,EAAE,CAAC;IAET,IAAI,CAAC,IAA4B;QAC7B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAClG,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;QACzF,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,OAAO,IAAI,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;QACrE,CAAC;QACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;IAC/C,CAAC;IAED,OAAO,CAAC,KAAqB;QACzB,OAAO,CACH,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;YACnB,iCAAiC;YACjC,SAAS,KAAK,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI;YAC5C,IAAI,CAAC,QAAQ,KAAK,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ;YACpD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,IAAI,EAAE,CAAC,CAC9F,CAAC;IACN,CAAC;IAED,mBAAmB,CAAC,KAAqB;QACrC,OAAO,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC;IACxC,CAAC;IAED,IAAI,cAAc;QAMd,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;CACJ;AAzCD,uBAyCC","sourcesContent":["import Base, { type ControlStateInitObject } from './Base';\nimport type {\n    AlexaV3ActionMapping,\n    AlexaV3DirectiveValue,\n    AlexaV3DiscoveryResponse,\n    AlexaV3Request,\n    AlexaV3StateMapping,\n} from '../../types';\n\nexport default class Mode extends Base {\n    private _supportedModes: {\n        value: string;\n        actionMappings: AlexaV3ActionMapping[];\n        discoveryResponse: AlexaV3DiscoveryResponse[];\n        stateMappings: AlexaV3StateMapping[];\n    }[] = [];\n\n    init(opts: ControlStateInitObject): void {\n        super.init(opts);\n        if (!opts.supportedModes || !Array.isArray(opts.supportedModes) || opts.supportedModes.length === 0) {\n            throw new Error('Mode control requires supportedModes array with at least one mode');\n        }\n        if (!opts.instance || typeof opts.instance !== 'string') {\n            throw new Error('Mode control requires a valid instance string');\n        }\n        this._supportedModes = opts.supportedModes;\n    }\n\n    matches(event: AlexaV3Request): boolean {\n        return (\n            Mode.matches(event) &&\n            // non-adjustable mode controller\n            'SetMode' === event?.directive?.header?.name &&\n            this.instance === event?.directive?.header?.instance &&\n            this.supportedModes.map(mode => mode.value).includes(event?.directive?.payload?.mode || '')\n        );\n    }\n\n    alexaDirectiveValue(event: AlexaV3Request): AlexaV3DirectiveValue {\n        return event.directive.payload.mode;\n    }\n\n    get supportedModes(): {\n        value: string;\n        actionMappings: AlexaV3ActionMapping[];\n        discoveryResponse: AlexaV3DiscoveryResponse[];\n        stateMappings: AlexaV3StateMapping[];\n    }[] {\n        return this._supportedModes;\n    }\n}\n"]}