{"version":3,"file":"Base.js","sourceRoot":"","sources":["../../../../../src/lib/AlexaSmartHomeV3/Alexa/Properties/Base.ts"],"names":[],"mappings":"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","sourcesContent":["import { configuredRangeOrDefault, firstLower, className } from '../../Helpers/Utils';\nimport type {\n    AlexaV3DirectiveName,\n    AlexaV3DirectiveValue,\n    AlexaV3Request,\n    IotExternalDetectorState,\n} from '../../types';\n\nexport type ControlStateInitObject = {\n    setState?: IotExternalDetectorState;\n    getState?: IotExternalDetectorState;\n    alexaSetter?: (alexaValue: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n    alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n\n    // Extra for Color control\n    hal?: {\n        hue: string;\n        saturation?: string;\n        brightness?: string;\n    };\n\n    // Extra for Mode control\n    supportedModes?: any[];\n    instance?: string;\n};\n\nexport class Base {\n    private _properties: string[] = [];\n    private _setState: IotExternalDetectorState | null = null;\n    protected _setId: string = '';\n    protected _getId: string = '';\n    private _valuesRange: { min: number | boolean; max: number | boolean } = { min: 0, max: 100 };\n    private _currentValue: ioBroker.StateValue | undefined;\n    protected _alexaSetter?: (value: AlexaV3DirectiveValue) => ioBroker.StateValue | undefined;\n    protected _alexaGetter?: (value: ioBroker.StateValue | undefined) => AlexaV3DirectiveValue;\n    private _instance?: string;\n    protected _supportedModesAsEnum: Record<string, number | string> = {};\n\n    /**\n     * @param opts The object to initialize the corresponding ioBroker state.\n     * @param opts.setState The iobroker state to write values to.\n     * @param opts.getState The iobroker state to read values from.\n     * @param opts.alexaSetter The function to apply to an Alexa value to transform it to the iobroker's one\n     * @param opts.alexaGetter The function to apply to an iobroker value to transform it to the Alexa's one\n     */\n    init(opts: ControlStateInitObject): void {\n        if (!opts.setState) {\n            throw new Error(`missing setState in ${this.constructor.name}`);\n        }\n        this._setState = opts.setState;\n        this._setId = opts.setState.id;\n        this._getId = opts.getState?.id || this._setId;\n        this._valuesRange = configuredRangeOrDefault(this._setState);\n        this._instance = opts.instance;\n\n        if (opts.alexaSetter) {\n            this._alexaSetter = opts.alexaSetter;\n        }\n        if (opts.alexaGetter) {\n            this._alexaGetter = opts.alexaGetter;\n        }\n    }\n\n    get instance(): string | undefined {\n        return this._instance;\n    }\n\n    get propertyName(): string {\n        return firstLower(`${this.constructor.name}`);\n    }\n\n    static get propertyName(): string {\n        return firstLower(className(this.toString()));\n    }\n\n    get valuesRangeMin(): number | boolean {\n        return this._valuesRange.min;\n    }\n\n    get valuesRangeMax(): number | boolean {\n        return this._valuesRange.max;\n    }\n\n    get setId(): string {\n        return this._setId;\n    }\n\n    get getId(): string {\n        return this._getId;\n    }\n    /**\n     * returns last known iobroker value\n     */\n    get currentValue(): ioBroker.StateValue | undefined {\n        return this._currentValue;\n    }\n\n    set currentValue(value: ioBroker.StateValue | undefined) {\n        this._currentValue = value;\n    }\n\n    value(alexaValue: AlexaV3DirectiveValue): ioBroker.StateValue | undefined {\n        return this._alexaSetter && typeof alexaValue === 'number'\n            ? this._alexaSetter(alexaValue)\n            : (alexaValue as ioBroker.StateValue | undefined);\n    }\n\n    alexaValue(value: ioBroker.StateValue | undefined): AlexaV3DirectiveValue {\n        return this._alexaGetter && typeof value === 'number'\n            ? this._alexaGetter(value)\n            : (value as AlexaV3DirectiveValue);\n    }\n\n    static directive(_event: AlexaV3Request): AlexaV3DirectiveName {\n        return Base.SET;\n    }\n\n    /**\n     * Checks whether a directive refers to the property\n     *\n     * @param event Contains the Alexa event.\n     */\n    static matches(event: AlexaV3Request): boolean {\n        return event?.directive?.header?.namespace === `Alexa.${className(this.toString())}Controller`;\n    }\n\n    matches(event: AlexaV3Request): boolean {\n        return event?.directive?.header?.name === this.propertyName;\n    }\n\n    /**\n     * Extracts value to be set on the smart device sent in an Alexa directive\n     */\n    alexaDirectiveValue(event: AlexaV3Request): AlexaV3DirectiveValue {\n        if (this.propertyName === 'color') {\n            return event.directive.payload.color;\n        }\n        if (this.propertyName === 'colorTemperatureInKelvin') {\n            return event.directive.payload.colorTemperatureInKelvin;\n        }\n        if (this.propertyName === 'brightness') {\n            return event.directive.payload.brightness;\n        }\n        // @ts-expect-error fix later\n        return event.directive.payload[this.propertyName];\n    }\n\n    reportValue(value: AlexaV3DirectiveValue): any {\n        return value;\n    }\n\n    static get ADJUST(): AlexaV3DirectiveName {\n        return 'ADJUST';\n    }\n\n    static get SET(): AlexaV3DirectiveName {\n        return 'SET';\n    }\n\n    static get CELSIUS_SCALE(): AlexaV3DirectiveName {\n        return 'CELSIUS';\n    }\n\n    get supportedModesAsEnum(): Record<string, number | string> {\n        return this._supportedModesAsEnum;\n    }\n}\n\nexport default Base;\n"]}