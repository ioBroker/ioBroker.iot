{"version":3,"file":"ThermostatMode.js","sourceRoot":"","sources":["../../../../../src/lib/AlexaSmartHomeV3/Alexa/Properties/ThermostatMode.ts"],"names":[],"mappings":";;;;;AAEA,+CAA6C;AAC7C,kDAA2D;AAE3D,MAAqB,cAAe,SAAQ,cAAI;IACpC,eAAe,GAAa,EAAE,CAAC;IAEvC,IAAI,CAAC,IAA4B;QAC7B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAClG,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;QACnG,CAAC;QACD,0DAA0D;QAC1D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC;QACjE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,cAA0B,CAAC;QACvD,IAAI,CAAC,qBAAqB,GAAG,IAAA,cAAM,EAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC9D,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,KAAqB;QAChC,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,KAAK,mBAAmB,CAAC;IAClE,CAAC;IAED,OAAO,CAAC,KAAqB;QACzB,OAAO,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IAED,mBAAmB,CAAC,KAAqB;QACrC,OAAO,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC;IACzD,CAAC;IAED,IAAI,cAAc;QACd,OAAO,IAAI,CAAC,eAAe,CAAC;IAChC,CAAC;IAED,MAAM,KAAK,IAAI;QACX,OAAO,MAAM,CAAC;IAClB,CAAC;IACD,MAAM,KAAK,IAAI;QACX,OAAO,MAAM,CAAC;IAClB,CAAC;IACD,MAAM,KAAK,GAAG;QACV,OAAO,KAAK,CAAC;IACjB,CAAC;IACD,MAAM,KAAK,IAAI;QACX,OAAO,MAAM,CAAC;IAClB,CAAC;IACD,MAAM,KAAK,GAAG;QACV,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AA7CD,iCA6CC","sourcesContent":["import type { AlexaV3DirectiveValue, AlexaV3Request } from '../../types';\n\nimport { asEnum } from '../../Helpers/Utils';\nimport Base, { type ControlStateInitObject } from './Base';\n\nexport default class ThermostatMode extends Base {\n    private _supportedModes: string[] = [];\n\n    init(opts: ControlStateInitObject): void {\n        super.init(opts);\n        if (!opts.supportedModes || !Array.isArray(opts.supportedModes) || opts.supportedModes.length === 0) {\n            throw new Error('ThermostatMode control requires supportedModes array with at least one mode');\n        }\n        // set mode to be AUTO for thermostats without mode at all\n        this.currentValue = this.setId ? undefined : ThermostatMode.AUTO;\n        this._supportedModes = opts.supportedModes as string[];\n        this._supportedModesAsEnum = asEnum(this._supportedModes);\n    }\n\n    static matches(event: AlexaV3Request): boolean {\n        return event?.directive?.header?.name === 'SetThermostatMode';\n    }\n\n    matches(event: AlexaV3Request): boolean {\n        return ThermostatMode.matches(event);\n    }\n\n    alexaDirectiveValue(event: AlexaV3Request): AlexaV3DirectiveValue {\n        return event.directive.payload.thermostatMode?.value;\n    }\n\n    get supportedModes(): any[] {\n        return this._supportedModes;\n    }\n\n    static get AUTO(): string {\n        return 'AUTO';\n    }\n    static get COOL(): string {\n        return 'COOL';\n    }\n    static get ECO(): string {\n        return 'ECO';\n    }\n    static get HEAT(): string {\n        return 'HEAT';\n    }\n    static get OFF(): string {\n        return 'OFF';\n    }\n}\n"]}