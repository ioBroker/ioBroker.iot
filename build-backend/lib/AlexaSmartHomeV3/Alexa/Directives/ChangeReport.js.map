{"version":3,"file":"ChangeReport.js","sourceRoot":"","sources":["../../../../../src/lib/AlexaSmartHomeV3/Alexa/Directives/ChangeReport.ts"],"names":[],"mappings":";;;;;AAAA,+CAAgD;AAChD,qEAA6C;AAC7C,kDAA0B;AAI1B;;;;;;;;;;GAUG;AACH,MAAqB,YAAa,SAAQ,cAAI;IAC1C,MAAM,CAAC,OAAO,CAAC,KAAqB;QAChC,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,KAAK,IAAA,iBAAS,EAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzE,CAAC;IAED,MAAM,CAAC,GAAG,CACN,UAA6B,EAC7B,YAAoB,EACpB,qBAA8B,EAC9B,SAAiB;QAEjB,OAAO;YACH,SAAS,EAAE;gBACP,MAAM,EAAE;oBACJ,IAAI,EAAE,IAAA,iBAAS,EAAC,IAAI,CAAC,QAAQ,EAAE,CAAyB;oBACxD,YAAY,EAAE,YAAY;oBAC1B,mBAAmB,EAAE,qBAAqB;oBAC1C,SAAS;oBACT,cAAc,EAAE,GAAG;oBACnB,SAAS,EAAE,OAAO;iBACrB;gBACD,QAAQ,EAAE;oBACN,KAAK,EAAE;wBACH,IAAI,EAAE,aAAa;wBACnB,KAAK,EAAE,EAAE;qBACZ;oBACD,UAAU;iBACb;gBACD,OAAO,EAAE,EAAE;aACd;SACJ,CAAC;IACN,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,KAAqB,EAAE,eAA8B;QAC9D,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACxC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAE3C,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC;QACzD,MAAM,YAAY,GAAG,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,YAAY,CAAC;QAC3D,MAAM,eAAe,GAAG,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,mBAAmB;YAChE,CAAC,CAAC,sBAAsB;YACxB,CAAC,CAAC,mBAAmB,CAAC;QAE1B,IAAI,QAAQ,GAAG,IAAI,uBAAa,CAAC;YAC7B,SAAS,EAAE,OAAO;YAClB,IAAI,EAAE,cAAc;YACpB,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS;YAC9C,UAAU;YACV,eAAe;SAClB,CAAC,CAAC;QAEH,QAAQ,CAAC,UAAU,EAAE,CAAC;QAEtB,MAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAE9E,IAAI,QAAQ,EAAE,WAAW,EAAE,CAAC;YACxB,MAAM,UAAU,GAAG,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;YAChD,KAAK,MAAM,QAAQ,IAAI,UAAU,EAAE,CAAC;gBAChC,IAAI,YAAY,KAAK,QAAQ,CAAC,IAAI,EAAE,CAAC;oBACjC,QAAQ,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC;gBAChD,CAAC;qBAAM,CAAC;oBACJ,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBAC1C,CAAC;YACL,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,QAAQ,GAAG,uBAAa,CAAC,mBAAmB,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAC/F,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAEpD,OAAO,QAAQ,CAAC,GAAG,EAAE,CAAC;IAC1B,CAAC;CACJ;AAxED,+BAwEC","sourcesContent":["import { className } from '../../Helpers/Utils';\nimport AlexaResponse from '../AlexaResponse';\nimport Base from './Base';\nimport type { AlexaV3DirectiveType, AlexaV3EndpointID, AlexaV3Request } from '../../types';\nimport type DeviceManager from '../../DeviceManager';\n\n/**\n * When the state of an endpoint changes for any reason, we report that change to Alexa in an Alexa.ChangeReport event.\n * Alexa can then provide the status change to the customer.\n * In the change report, we specify the state of any changed properties in the payload object.\n * For example, if a customer manually turns on a light, we send a change report event that indicates the powerState property\n * of the Alexa.PowerController interface has changed its value to ON.\n *\n * If the properties of an interface are reported as proactivelyReported during discovery,\n * we must send Alexa an Alexa.ChangeReport event whenever a property value changes.\n * If a state change happens because of a directive from Alexa, we send both a directive response and a change report event.\n */\nexport default class ChangeReport extends Base {\n    static matches(event: AlexaV3Request): boolean {\n        return event?.directive?.header?.name === className(this.toString());\n    }\n\n    static get(\n        endpointId: AlexaV3EndpointID,\n        propertyName: string,\n        isPhysicalInteraction: boolean,\n        messageId: string,\n    ): AlexaV3Request {\n        return {\n            directive: {\n                header: {\n                    name: className(this.toString()) as AlexaV3DirectiveType,\n                    propertyName: propertyName,\n                    physicalInteraction: isPhysicalInteraction,\n                    messageId,\n                    payloadVersion: '3',\n                    namespace: 'Alexa',\n                },\n                endpoint: {\n                    scope: {\n                        type: 'BearerToken',\n                        token: '',\n                    },\n                    endpointId,\n                },\n                payload: {},\n            },\n        };\n    }\n\n    async handle(event: AlexaV3Request, endpointManager: DeviceManager): Promise<AlexaResponse> {\n        this.log.debug(`handling ChangeReport`);\n        this.log.silly(`${JSON.stringify(event)}`);\n\n        const endpointId = event.directive?.endpoint?.endpointId;\n        const propertyName = event.directive?.header?.propertyName;\n        const changeCauseType = event.directive?.header?.physicalInteraction\n            ? 'PHYSICAL_INTERACTION'\n            : 'VOICE_INTERACTION';\n\n        let response = new AlexaResponse({\n            namespace: 'Alexa',\n            name: 'ChangeReport',\n            messageId: event?.directive?.header?.messageId,\n            endpointId,\n            changeCauseType,\n        });\n\n        response.addContext();\n\n        const endpoint = endpointId ? endpointManager.endpointById(endpointId) : null;\n\n        if (endpoint?.reportState) {\n            const properties = await endpoint.reportState();\n            for (const property of properties) {\n                if (propertyName === property.name) {\n                    response.addPayloadChangeProperty(property);\n                } else {\n                    response.addContextProperty(property);\n                }\n            }\n        } else {\n            response = AlexaResponse.nonExistingEndpoint(event.directive.header.messageId, endpointId);\n        }\n\n        this.log.debug(`${JSON.stringify(response.get())}`);\n\n        return response.get();\n    }\n}\n"]}