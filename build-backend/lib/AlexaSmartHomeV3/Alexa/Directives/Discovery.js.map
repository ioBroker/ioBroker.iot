{"version":3,"file":"Discovery.js","sourceRoot":"","sources":["../../../../../src/lib/AlexaSmartHomeV3/Alexa/Directives/Discovery.ts"],"names":[],"mappings":";;;;;AAAA,qEAA6C;AAC7C,kDAA0B;AAI1B,MAAqB,SAAU,SAAQ,cAAI;IACvC,MAAM,CAAC,KAAqB,EAAE,eAA8B;QACxD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QACrC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAE3C,MAAM,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC;QAE5C,MAAM,QAAQ,GAAG,IAAI,uBAAa,CAAC;YAC/B,SAAS,EAAE,SAAS,CAAC,SAAS;YAC9B,IAAI,EAAE,mBAAmB;YACzB,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS;SACjD,CAAC,CAAC;QAEH,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACzB,KAAK,EAAE,CAAC;YACR,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;gBACd,IAAI,CAAC,GAAG,CAAC,IAAI,CACT,uDAAuD,QAAQ,CAAC,YAAY,0BAA0B,CACzG,CAAC;gBACF,OAAO;YACX,CAAC;YACD,QAAQ,CAAC,kBAAkB,CAAC;gBACxB,UAAU,EAAE,QAAQ,CAAC,EAAE;gBACvB,WAAW,EAAE,QAAQ,CAAC,WAAW,IAAI,SAAS;gBAC9C,YAAY,EAAE,QAAQ,CAAC,YAAY;gBACnC,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB,IAAI,EAAE;gBACnD,YAAY,EACR,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,oBAAoB,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;oBACjG,EAAE;aACT,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAEpD,OAAO,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;IAC3C,CAAC;CACJ;AAtCD,4BAsCC","sourcesContent":["import AlexaResponse from '../AlexaResponse';\nimport Base from './Base';\nimport type { AlexaV3Request } from '../../types';\nimport type DeviceManager from '../../DeviceManager';\n\nexport default class Discovery extends Base {\n    handle(event: AlexaV3Request, endpointManager: DeviceManager): Promise<AlexaResponse> {\n        this.log.debug(`handling Discovery`);\n        this.log.silly(`${JSON.stringify(event)}`);\n\n        const endpoints = endpointManager.endpoints;\n\n        const response = new AlexaResponse({\n            namespace: Discovery.namespace,\n            name: 'Discover.Response',\n            messageId: event?.directive?.header?.messageId,\n        });\n\n        let count = 0;\n\n        endpoints.forEach(endpoint => {\n            count++;\n            if (count > 300) {\n                this.log.warn(\n                    `Too many devices. Alexa supports up to 300 devices. ${endpoint.friendlyName} will not be discovered.`,\n                );\n                return;\n            }\n            response.addPayloadEndpoint({\n                endpointId: endpoint.id,\n                description: endpoint.description || undefined,\n                friendlyName: endpoint.friendlyName,\n                displayCategories: endpoint.displayCategories || [],\n                capabilities:\n                    endpoint.capabilities?.map(capability => response.asEndpointCapability(capability.alexaResponse)) ||\n                    [],\n            });\n        });\n\n        this.log.silly(`${JSON.stringify(response.get())}`);\n\n        return Promise.resolve(response.get());\n    }\n}\n"]}