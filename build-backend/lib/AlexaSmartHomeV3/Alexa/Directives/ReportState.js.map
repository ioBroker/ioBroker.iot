{"version":3,"file":"ReportState.js","sourceRoot":"","sources":["../../../../../src/lib/AlexaSmartHomeV3/Alexa/Directives/ReportState.ts"],"names":[],"mappings":";;;;;AACA,+CAAgD;AAChD,qEAA6C;AAC7C,kDAA0B;AAG1B;;;;;;;;GAQG;AACH,MAAqB,WAAY,SAAQ,cAAI;IACzC,MAAM,CAAC,OAAO,CAAC,KAAsC;QACjD,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,KAAK,IAAA,iBAAS,EAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACzE,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,KAAsC,EAAE,eAA8B;QAC/E,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QACvC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAE3C,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC;QAEzD,IAAI,QAAQ,GAAG,IAAI,uBAAa,CAAC;YAC7B,SAAS,EAAE,OAAO;YAClB,IAAI,EAAE,aAAa;YACnB,gBAAgB,EAAE,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,gBAAgB;YAC3D,KAAK,EAAE,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK;YAC9C,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS;YAC7C,UAAU;SACb,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAE9E,IAAI,QAAQ,EAAE,WAAW,EAAE,CAAC;YACxB,MAAM,UAAU,GAA0B,MAAM,QAAQ,CAAC,WAAW,EAAE,CAAC;YACvE,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC1E,CAAC;aAAM,CAAC;YACJ,QAAQ,GAAG,uBAAa,CAAC,mBAAmB,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAC/F,CAAC;QAED,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAEpD,OAAO,QAAQ,CAAC,GAAG,EAAE,CAAC;IAC1B,CAAC;CACJ;AAjCD,8BAiCC","sourcesContent":["import type { AlexaV3SmartHomeRequestEnvelope } from '../../types';\nimport { className } from '../../Helpers/Utils';\nimport AlexaResponse from '../AlexaResponse';\nimport Base from './Base';\nimport type DeviceManager from '../../DeviceManager';\n\n/**\n * When Alexa sends an Alexa.ReportState directive to request the state of an endpoint, the skill sends an Alexa.StateReport response.\n * This response contains the current state of all the properties that are retrievable.\n * The following information in the Alexa.StateReport response:\n * - the state of all the retrievable properties in the context object\n * - endpoint for the report is identified in the endpoint object\n * - the payload is set to an empty object\n * - correlationToken set to the value from the Alexa.ReportState request\n */\nexport default class ReportState extends Base {\n    static matches(event: AlexaV3SmartHomeRequestEnvelope): boolean {\n        return event?.directive?.header?.name === className(this.toString());\n    }\n\n    async handle(event: AlexaV3SmartHomeRequestEnvelope, endpointManager: DeviceManager): Promise<AlexaResponse> {\n        this.log.debug(`handling ReportState`);\n        this.log.silly(`${JSON.stringify(event)}`);\n\n        const endpointId = event.directive?.endpoint?.endpointId;\n\n        let response = new AlexaResponse({\n            namespace: 'Alexa',\n            name: 'StateReport',\n            correlationToken: event.directive?.header?.correlationToken,\n            token: event.directive?.endpoint?.scope?.token,\n            messageId: event.directive?.header?.messageId,\n            endpointId,\n        });\n\n        const endpoint = endpointId ? endpointManager.endpointById(endpointId) : null;\n\n        if (endpoint?.reportState) {\n            const properties: Record<string, any>[] = await endpoint.reportState();\n            properties.forEach(property => response.addContextProperty(property));\n        } else {\n            response = AlexaResponse.nonExistingEndpoint(event.directive.header.messageId, endpointId);\n        }\n\n        this.log.silly(`${JSON.stringify(response.get())}`);\n\n        return response.get();\n    }\n}\n"]}