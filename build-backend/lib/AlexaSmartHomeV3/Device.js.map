{"version":3,"file":"Device.js","sourceRoot":"","sources":["../../../src/lib/AlexaSmartHomeV3/Device.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { endpointId, defaultIfNullOrEmpty, distinctByPropertyName } from './Helpers/Utils';\nimport Logger from './Helpers/Logger';\nimport type { AlexaV3Category, AlexaV3Namespace, AlexaV3ReportedState, AlexaV3Request } from './types';\nimport type Control from './Controls/Control';\nimport type { Base as CapabilitiesBase } from './Alexa/Capabilities/Base';\nimport type AlexaResponse from './Alexa/AlexaResponse';\n\n/**\n * This class hides the different iobroker controls representing physical devices from Alexa\n * and makes them appear as a single endpoint.\n * Due to differences in Alexa's and iobroker's endpoint/devices concepts, we have to merge some of the\n * by the type-detector detected controls to a single device, so that multiple controls are considered\n * to be the same endpoint from Alexa's perspective.\n * This leads to a situation where while Alexa believes controlling a single endpoint by sending a directive\n * to change the endpoint's state, in reality, the states of multiple controls, i.e. physical devices, are changed.\n */\nexport default class Device {\n    public log: Logger;\n    public id: string;\n    public friendlyName: string;\n    public controls: Control[];\n    public autoDetected: boolean;\n    public roomName?: string;\n    public funcName?: string;\n    public toggle?: boolean;\n    public description?: string;\n    public lastReportedState?: any;\n\n    constructor(opts: {\n        id: string;\n        friendlyName: string;\n        controls: Control[];\n        autoDetected?: boolean;\n        roomName?: string;\n        funcName?: string;\n        toggle?: boolean;\n    }) {\n        this.log = new Logger(this);\n        this.id = defaultIfNullOrEmpty<string>(endpointId(opts.id), uuidv4());\n        this.friendlyName = defaultIfNullOrEmpty<string>(opts.friendlyName, uuidv4());\n        this.controls = defaultIfNullOrEmpty<Control[]>(opts.controls, []);\n        this.autoDetected = !!opts.autoDetected;\n        this.roomName = opts.roomName;\n        this.funcName = opts.funcName;\n        this.toggle = opts.toggle;\n    }\n\n    supports(event: AlexaV3Request): boolean {\n        return this.controls.find(c => c.supports(event)) !== undefined;\n    }\n\n    async handle(event: AlexaV3Request): Promise<AlexaResponse> {\n        this.log.debug(`handling alexa event`);\n        this.log.silly(`${JSON.stringify(event)}`);\n\n        const promises: Promise<AlexaResponse>[] = [];\n        if (this.toggle) {\n            // get current state\n            event.currentState = await this.reportState();\n        }\n\n        this.controls.forEach(control => promises.push(control.handle(event)));\n        const results = await Promise.allSettled(promises);\n\n        const fulfilled = results.find(item => item.status === 'fulfilled');\n\n        return fulfilled !== undefined ? fulfilled.value : (results[0] as any).reason;\n    }\n\n    async reportState(): Promise<AlexaV3ReportedState[]> {\n        const promises: Promise<AlexaV3ReportedState[]>[] = [];\n        this.controls.forEach(control => promises.push(control.reportState()));\n        const results = await Promise.allSettled(promises);\n\n        const properties: {\n            namespace: AlexaV3Namespace;\n            instance?: string;\n            name: string;\n            value: any;\n        }[] = results.filter(item => item.status === 'fulfilled').flatMap(item => item.value);\n\n        return distinctByPropertyName<{\n            namespace: AlexaV3Namespace;\n            instance?: string;\n            name: string;\n            value: any;\n        }>(properties, 'name', true);\n    }\n\n    get capabilities(): CapabilitiesBase[] {\n        const allCapabilities = this.controls.flatMap(item => item.supported);\n        return distinctByPropertyName(allCapabilities, 'namespace');\n    }\n\n    get displayCategories(): AlexaV3Category[] {\n        return Array.from(new Set(this.controls.flatMap(item => item.categories)));\n    }\n\n    toString(): string {\n        const controls = this.controls;\n        const controlsAsString = function (): string {\n            let repr = ' (Controls: ';\n            for (const ctrl of controls) {\n                repr += `${ctrl.toString()}, `;\n            }\n            repr = `${repr.slice(0, -2)})`;\n            return repr;\n        };\n        return `${this.friendlyName}${controlsAsString()}`;\n    }\n}\n"]}