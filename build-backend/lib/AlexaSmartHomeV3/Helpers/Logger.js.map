{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Helpers/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["import AdapterProvider from './AdapterProvider';\n\nexport type LogFn = (message: string) => void;\n\nexport default class Logger {\n    private readonly logged: Map<number, number> = new Map();\n    private readonly maxLoggedEntries = 500;\n    private readonly ttl = 30;\n    public _component: string;\n\n    constructor(instance: unknown) {\n        if (instance && typeof instance === 'object' && 'constructor' in instance) {\n            this._component = (instance as { constructor: { name?: string } }).constructor.name || 'Unknown';\n        } else if (typeof instance === 'string') {\n            this._component = instance;\n        } else {\n            this._component = 'Unknown';\n        }\n    }\n\n    get component(): string {\n        return this._component;\n    }\n\n    set component(value: string) {\n        this._component = value;\n    }\n\n    static hashCode(str: string): number {\n        let hash = 0;\n        let i;\n        let chr;\n        if (str.length === 0) {\n            return hash;\n        }\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = (hash << 5) - hash + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    }\n\n    toSkip(hash: number): boolean {\n        // clear old entries\n        let keys = Array.from(this.logged.keys());\n        const now = new Date().getTime();\n        for (const key of keys) {\n            const expired = (now - key) / 1000 > this.ttl;\n            if (expired) {\n                this.logged.delete(key);\n            }\n        }\n\n        keys = Array.from(this.logged.keys());\n        if (keys.length > this.maxLoggedEntries) {\n            const toRemove = keys.length - this.maxLoggedEntries;\n            keys.sort();\n            for (let i = 0; i < toRemove; i++) {\n                this.logged.delete(keys[i]);\n            }\n        }\n\n        return Array.from(this.logged.values()).includes(hash);\n    }\n\n    compose(message: string): string {\n        return `[AlexaV3::${this.component}]: ${message}`;\n    }\n\n    print(logger: LogFn, message: string): void {\n        if (typeof message === 'string' && message.length > 0) {\n            const hash = Logger.hashCode(message);\n            if (this.toSkip(hash)) {\n                return;\n            }\n\n            this.logged.set(new Date().getTime(), hash);\n            return logger(message);\n        }\n    }\n\n    silly(message: string): void {\n        return this.print(AdapterProvider.get().log.silly, this.compose(message));\n    }\n\n    debug(message: string): void {\n        return this.print(AdapterProvider.get().log.debug, this.compose(message));\n    }\n\n    info(message: string): void {\n        return this.print(AdapterProvider.get().log.info, this.compose(message));\n    }\n\n    warn(message: string): void {\n        return this.print(AdapterProvider.get().log.warn, this.compose(message));\n    }\n\n    error(message: string): void {\n        return this.print(AdapterProvider.get().log.error, this.compose(message));\n    }\n}\n"]}