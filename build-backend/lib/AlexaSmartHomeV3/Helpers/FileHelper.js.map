{"version":3,"file":"FileHelper.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Helpers/FileHelper.ts"],"names":[],"mappings":";;;;;AAAA,sDAAyB;AACzB,0DAA6B;AAC7B,0EAA2C;AAC3C,wEAAgD;AAEhD,MAAqB,UAAU;IAC3B,MAAM,CAAC,WAAW,CAAS;IAC3B,MAAM,KAAK,UAAU;QACjB,IAAI,CAAC,WAAW,KAAK,sBAAK,CAAC,0BAA0B,CAAC,yBAAe,CAAC,GAAG,EAAE,CAAC,CAAC;QAC7E,OAAO,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,UAAkB;QACxC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,iBAAE,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE;gBAC1B,IAAI,KAAK,EAAE,CAAC;oBACR,kDAAkD;oBAClD,iBAAE,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,KAAK,CAAC,EAAE;wBAC9C,IAAI,KAAK,EAAE,CAAC;4BACR,MAAM,CAAC,KAAK,CAAC,CAAC;wBAClB,CAAC;6BAAM,CAAC;4BACJ,OAAO,EAAE,CAAC;wBACd,CAAC;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC;qBAAM,CAAC;oBACJ,OAAO,EAAE,CAAC;gBACd,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,YAAoB;QACpC,OAAO,mBAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,QAAgB;QAC1B,OAAO,iBAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAgB;QAC9B,OAAO,iBAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,QAAgB,EAAE,OAAY;QAC7C,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;YAC9B,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC;QACD,OAAO,iBAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;CACJ;AA5CD,6BA4CC","sourcesContent":["import fs from 'node:fs';\nimport path from 'node:path';\nimport utils from '@iobroker/adapter-core';\nimport AdapterProvider from './AdapterProvider';\n\nexport default class FileHelper {\n    static _rootFolder: string;\n    static get rootFolder(): string {\n        this._rootFolder ||= utils.getAbsoluteInstanceDataDir(AdapterProvider.get());\n        return this._rootFolder;\n    }\n\n    static async createFolder(folderPath: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            fs.access(folderPath, error => {\n                if (error) {\n                    // If the directory does not exist, then create it\n                    fs.mkdir(folderPath, { recursive: true }, error => {\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve();\n                        }\n                    });\n                } else {\n                    resolve();\n                }\n            });\n        });\n    }\n\n    static absolutePath(relativePath: string): string {\n        return path.join(this.rootFolder, relativePath);\n    }\n\n    static exists(fileName: string): boolean {\n        return fs.existsSync(fileName);\n    }\n\n    static async read(fileName: string): Promise<string> {\n        return fs.promises.readFile(fileName, 'utf-8');\n    }\n\n    static async write(fileName: string, content: any): Promise<void> {\n        if (typeof content !== 'string') {\n            content = JSON.stringify(content);\n        }\n        return fs.promises.writeFile(fileName, content);\n    }\n}\n"]}