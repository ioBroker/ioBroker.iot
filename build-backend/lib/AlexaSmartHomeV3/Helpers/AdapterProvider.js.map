{"version":3,"file":"AdapterProvider.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Helpers/AdapterProvider.ts"],"names":[],"mappings":";;AAEA,MAAqB,eAAe;IAChC,MAAM,CAAC,eAAe,CAAa;IAEnC,MAAM,CAAC,IAAI,CAAC,OAAmB;QAC3B,eAAe,CAAC,eAAe,GAAG,OAAO,CAAC;IAC9C,CAAC;IAED,MAAM,CAAC,GAAG;QACN,OAAO,eAAe,CAAC,eAAe,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAU,EAAE,KAA0B;QACxD,MAAM,eAAe,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;QACnE,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,oCAAoC,EAAE,SAAS,KAAK,GAAG,CAAC,CAAC;IAC7F,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAU;QAC5B,MAAM,KAAK,GAAG,MAAM,eAAe,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;QACnE,OAAO,KAAK,EAAE,GAAG,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,EAAU;QAC7B,MAAM,eAAe,CAAC,GAAG,EAAE,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;IAChE,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,EAAU;QAC/B,MAAM,eAAe,CAAC,GAAG,EAAE,CAAC,6BAA6B,CAAC,EAAE,CAAC,CAAC;IAClE,CAAC;CACJ;AAtCD,kCAsCC","sourcesContent":["import type { IotAdapter } from '../../../main';\n\nexport default class AdapterProvider {\n    static adapterInstance: IotAdapter;\n\n    static init(adapter: IotAdapter): void {\n        AdapterProvider.adapterInstance = adapter;\n    }\n\n    static get(): IotAdapter {\n        return AdapterProvider.adapterInstance;\n    }\n\n    /**\n     * Sets iobroker state to the passed on value\n     *\n     * @param id - id of the state to write the value to\n     * @param value - value to set the provided state to\n     */\n    static async setState(id: string, value: ioBroker.StateValue): Promise<void> {\n        await AdapterProvider.get().setForeignStateAsync(id, value, false);\n        AdapterProvider.get().log.silly(`[AlexaV3::AdapterProvider]: set [${id}] to [${value}]`);\n    }\n\n    /**\n     * @param id State id to get the value from\n     * @returns Object's val returned by the iobroker getForeignStateAsync function\n     */\n    static async getState(id: string): Promise<ioBroker.StateValue | undefined> {\n        const state = await AdapterProvider.get().getForeignStateAsync(id);\n        return state?.val;\n    }\n\n    static async subscribe(id: string): Promise<void> {\n        await AdapterProvider.get().subscribeForeignStatesAsync(id);\n    }\n\n    static async unsubscribe(id: string): Promise<void> {\n        await AdapterProvider.get().unsubscribeForeignStatesAsync(id);\n    }\n}\n"]}