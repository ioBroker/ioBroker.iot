{"version":3,"file":"RateLimiter.js","sourceRoot":"","sources":["../../../../src/lib/AlexaSmartHomeV3/Helpers/RateLimiter.ts"],"names":[],"mappings":"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","sourcesContent":["// import path from 'path';\nimport HourlyDeviceRateLimitExceeded from '../Exceptions/HourlyDeviceRateLimitExceeded';\nimport OverallDailyRateLimitExceeded from '../Exceptions/OverallDailyRateLimitExceeded';\n// import FileHelper from './FileHelper';\nimport * as Utils from './Utils';\nimport type { AlexaV3EndpointID } from '../types';\n\nexport default class RateLimiter {\n    static MAX_DEVICE_STATE_CHANGES_PER_HOUR = 60;\n    static MAX_CHANGES_PER_DAY = 1000;\n    static USAGE_STORAGE_FOLDER = 'usage';\n    static USAGE_STORAGE_FILE_NAME = 'usage.json';\n\n    static usage: Map<\n        string,\n        {\n            changeCounter: number;\n            timestamp: string;\n        }\n    > = new Map();\n\n    static init(): Promise<void> {\n        try {\n            // await FileHelper.createFolder(FileHelper.absolutePath(this.USAGE_STORAGE_FOLDER));\n            // const raw = await FileHelper.read(this.storageFileName);\n            // this.usage = new Map(JSON.parse(raw));\n            this.usage = new Map();\n        } catch {\n            this.usage = new Map();\n        }\n        return Promise.resolve();\n    }\n\n    // static get storageFileName(): string {\n    //     return FileHelper.absolutePath(path.join(this.USAGE_STORAGE_FOLDER, this.USAGE_STORAGE_FILE_NAME));\n    // }\n\n    static async store(): Promise<void> {\n        // try {\n        //     await FileHelper.write(this.storageFileName, JSON.stringify(Array.from(this.usage.entries())));\n        // } catch (error) {\n        //     // nop\n        // }\n    }\n\n    static get(endpointId: AlexaV3EndpointID): {\n        changeCounter: number;\n        timestamp: string;\n    } {\n        let item = this.usage.get(endpointId);\n        if (!item) {\n            item = {\n                changeCounter: 0,\n                timestamp: Utils.currentHour().toISOString(),\n            };\n            this.usage.set(endpointId, item);\n        }\n        return item;\n    }\n\n    static async incrementAndGet(endpointId: AlexaV3EndpointID): Promise<{\n        changeCounter: number;\n        timestamp: string;\n    }> {\n        const item = this.get(endpointId);\n\n        if (!Utils.isCurrentHour(Utils.parseISOString(item.timestamp))) {\n            item.changeCounter = 1;\n            item.timestamp = Utils.currentHour().toISOString();\n        } else {\n            item.changeCounter += 1;\n        }\n\n        this.usage.set(endpointId, item);\n\n        try {\n            await this.store();\n        } catch {\n            // nop\n        }\n\n        if (item.changeCounter > this.MAX_DEVICE_STATE_CHANGES_PER_HOUR) {\n            throw new HourlyDeviceRateLimitExceeded(`Hourly state change limit for ${endpointId} exceeded`);\n        }\n\n        const changesToday = Array.from(this.usage.values())\n            .filter(item => Utils.isToday(Utils.parseISOString(item.timestamp)))\n            .reduce((sum, { changeCounter }) => sum + changeCounter, 0);\n\n        if (changesToday > this.MAX_CHANGES_PER_DAY) {\n            throw new OverallDailyRateLimitExceeded(`Overall daily state change limit exceeded`);\n        }\n\n        return item;\n    }\n}\n"]}